
F070RB_Firmware_anywhere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  20000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .got          0000000c  200000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  200000cc  080000cc  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         000009a0  080000d8  080000d8  000100d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000000  08000a78  08000a78  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ARM.extab    00000000  08000a78  08000a78  000200dc  2**0
                  CONTENTS
  6 .ARM          00000000  08000a78  08000a78  000200dc  2**0
                  CONTENTS
  7 .preinit_array 00000000  08000a78  08000a78  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000004  200000d8  08000a80  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000070  200000dc  08000a84  000200dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000014c  08000a84  0002014c  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007379  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000012a3  00000000  00000000  0002747d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000830  00000000  00000000  00028720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000798  00000000  00000000  00028f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000f489  00000000  00000000  000296e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008aab  00000000  00000000  00038b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0005ffa8  00000000  00000000  0004161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  000a15c4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001cec  00000000  00000000  000a1618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000d8 <__do_global_dtors_aux>:
 80000d8:	b510      	push	{r4, lr}
 80000da:	4c06      	ldr	r4, [pc, #24]	; (80000f4 <__do_global_dtors_aux+0x1c>)
 80000dc:	7823      	ldrb	r3, [r4, #0]
 80000de:	2b00      	cmp	r3, #0
 80000e0:	d107      	bne.n	80000f2 <__do_global_dtors_aux+0x1a>
 80000e2:	4b05      	ldr	r3, [pc, #20]	; (80000f8 <__do_global_dtors_aux+0x20>)
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d002      	beq.n	80000ee <__do_global_dtors_aux+0x16>
 80000e8:	4804      	ldr	r0, [pc, #16]	; (80000fc <__do_global_dtors_aux+0x24>)
 80000ea:	e000      	b.n	80000ee <__do_global_dtors_aux+0x16>
 80000ec:	bf00      	nop
 80000ee:	2301      	movs	r3, #1
 80000f0:	7023      	strb	r3, [r4, #0]
 80000f2:	bd10      	pop	{r4, pc}
 80000f4:	200000dc 	.word	0x200000dc
 80000f8:	00000000 	.word	0x00000000
 80000fc:	08000a60 	.word	0x08000a60

08000100 <frame_dummy>:
 8000100:	4b04      	ldr	r3, [pc, #16]	; (8000114 <frame_dummy+0x14>)
 8000102:	b510      	push	{r4, lr}
 8000104:	2b00      	cmp	r3, #0
 8000106:	d003      	beq.n	8000110 <frame_dummy+0x10>
 8000108:	4903      	ldr	r1, [pc, #12]	; (8000118 <frame_dummy+0x18>)
 800010a:	4804      	ldr	r0, [pc, #16]	; (800011c <frame_dummy+0x1c>)
 800010c:	e000      	b.n	8000110 <frame_dummy+0x10>
 800010e:	bf00      	nop
 8000110:	bd10      	pop	{r4, pc}
 8000112:	46c0      	nop			; (mov r8, r8)
 8000114:	00000000 	.word	0x00000000
 8000118:	200000e0 	.word	0x200000e0
 800011c:	08000a60 	.word	0x08000a60

08000120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000120:	b5b0      	push	{r4, r5, r7, lr}
 8000122:	af00      	add	r7, sp, #0
 8000124:	464c      	mov	r4, r9
  //HAL_Init();
  //SystemClock_Config();
  //MX_GPIO_Init();
  MX_TIM16_Init();
 8000126:	f000 f809 	bl	800013c <MX_TIM16_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 800012a:	4b03      	ldr	r3, [pc, #12]	; (8000138 <main+0x18>)
 800012c:	58e3      	ldr	r3, [r4, r3]
 800012e:	0018      	movs	r0, r3
 8000130:	f000 fa8e 	bl	8000650 <HAL_TIM_Base_Start_IT>
  //__enable_irq();

  while (1)
 8000134:	e7fe      	b.n	8000134 <main+0x14>
 8000136:	46c0      	nop			; (mov r8, r8)
 8000138:	00000008 	.word	0x00000008

0800013c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800013c:	b580      	push	{r7, lr}
 800013e:	af00      	add	r7, sp, #0
 8000140:	464b      	mov	r3, r9
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000142:	4a14      	ldr	r2, [pc, #80]	; (8000194 <MX_TIM16_Init+0x58>)
 8000144:	589a      	ldr	r2, [r3, r2]
 8000146:	4914      	ldr	r1, [pc, #80]	; (8000198 <MX_TIM16_Init+0x5c>)
 8000148:	6011      	str	r1, [r2, #0]
  htim16.Init.Prescaler = 48000 - 1;
 800014a:	4a12      	ldr	r2, [pc, #72]	; (8000194 <MX_TIM16_Init+0x58>)
 800014c:	589a      	ldr	r2, [r3, r2]
 800014e:	4913      	ldr	r1, [pc, #76]	; (800019c <MX_TIM16_Init+0x60>)
 8000150:	6051      	str	r1, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000152:	4a10      	ldr	r2, [pc, #64]	; (8000194 <MX_TIM16_Init+0x58>)
 8000154:	589a      	ldr	r2, [r3, r2]
 8000156:	2100      	movs	r1, #0
 8000158:	6091      	str	r1, [r2, #8]
  htim16.Init.Period = 2000;
 800015a:	4a0e      	ldr	r2, [pc, #56]	; (8000194 <MX_TIM16_Init+0x58>)
 800015c:	589a      	ldr	r2, [r3, r2]
 800015e:	21fa      	movs	r1, #250	; 0xfa
 8000160:	00c9      	lsls	r1, r1, #3
 8000162:	60d1      	str	r1, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000164:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <MX_TIM16_Init+0x58>)
 8000166:	589a      	ldr	r2, [r3, r2]
 8000168:	2100      	movs	r1, #0
 800016a:	6111      	str	r1, [r2, #16]
  htim16.Init.RepetitionCounter = 0;
 800016c:	4a09      	ldr	r2, [pc, #36]	; (8000194 <MX_TIM16_Init+0x58>)
 800016e:	589a      	ldr	r2, [r3, r2]
 8000170:	2100      	movs	r1, #0
 8000172:	6151      	str	r1, [r2, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <MX_TIM16_Init+0x58>)
 8000176:	589a      	ldr	r2, [r3, r2]
 8000178:	2100      	movs	r1, #0
 800017a:	6191      	str	r1, [r2, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800017c:	4a05      	ldr	r2, [pc, #20]	; (8000194 <MX_TIM16_Init+0x58>)
 800017e:	589b      	ldr	r3, [r3, r2]
 8000180:	0018      	movs	r0, r3
 8000182:	f000 fa15 	bl	80005b0 <HAL_TIM_Base_Init>
 8000186:	1e03      	subs	r3, r0, #0
 8000188:	d001      	beq.n	800018e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800018a:	f000 f81f 	bl	80001cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	00000008 	.word	0x00000008
 8000198:	40014400 	.word	0x40014400
 800019c:	0000bb7f 	.word	0x0000bb7f

080001a0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	464b      	mov	r3, r9
  if (htim == &htim16)
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	4906      	ldr	r1, [pc, #24]	; (80001c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80001ae:	585b      	ldr	r3, [r3, r1]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d105      	bne.n	80001c0 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001b4:	2390      	movs	r3, #144	; 0x90
 80001b6:	05db      	lsls	r3, r3, #23
 80001b8:	2120      	movs	r1, #32
 80001ba:	0018      	movs	r0, r3
 80001bc:	f000 f9dd 	bl	800057a <HAL_GPIO_TogglePin>
  }

}
 80001c0:	46c0      	nop			; (mov r8, r8)
 80001c2:	46bd      	mov	sp, r7
 80001c4:	b002      	add	sp, #8
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	00000008 	.word	0x00000008

080001cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001d0:	b672      	cpsid	i
}
 80001d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001d4:	e7fe      	b.n	80001d4 <Error_Handler+0x8>
	...

080001d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <HAL_TIM_Base_MspInit+0x48>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d115      	bne.n	8000216 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <HAL_TIM_Base_MspInit+0x4c>)
 80001ec:	699a      	ldr	r2, [r3, #24]
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <HAL_TIM_Base_MspInit+0x4c>)
 80001f0:	2180      	movs	r1, #128	; 0x80
 80001f2:	0289      	lsls	r1, r1, #10
 80001f4:	430a      	orrs	r2, r1
 80001f6:	619a      	str	r2, [r3, #24]
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <HAL_TIM_Base_MspInit+0x4c>)
 80001fa:	699a      	ldr	r2, [r3, #24]
 80001fc:	2380      	movs	r3, #128	; 0x80
 80001fe:	029b      	lsls	r3, r3, #10
 8000200:	4013      	ands	r3, r2
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	2015      	movs	r0, #21
 800020c:	f000 f990 	bl	8000530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000210:	2015      	movs	r0, #21
 8000212:	f000 f9a2 	bl	800055a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000216:	46c0      	nop			; (mov r8, r8)
 8000218:	46bd      	mov	sp, r7
 800021a:	b004      	add	sp, #16
 800021c:	bd80      	pop	{r7, pc}
 800021e:	46c0      	nop			; (mov r8, r8)
 8000220:	40014400 	.word	0x40014400
 8000224:	40021000 	.word	0x40021000

08000228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800022c:	e7fe      	b.n	800022c <NMI_Handler+0x4>

0800022e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000232:	e7fe      	b.n	8000232 <HardFault_Handler+0x4>

08000234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800024c:	f000 f8d2 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
 800025c:	464b      	mov	r3, r9
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800025e:	4a04      	ldr	r2, [pc, #16]	; (8000270 <TIM16_IRQHandler+0x18>)
 8000260:	589b      	ldr	r3, [r3, r2]
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fa40 	bl	80006e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	00000008 	.word	0x00000008

08000274 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <SystemInit+0x28>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <SystemInit+0x28>)
 800027e:	2103      	movs	r1, #3
 8000280:	438a      	bics	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <SystemInit+0x28>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <SystemInit+0x28>)
 800028a:	2103      	movs	r1, #3
 800028c:	430a      	orrs	r2, r1
 800028e:	601a      	str	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000290:	f3bf 8f5f 	dmb	sy
}
 8000294:	46c0      	nop			; (mov r8, r8)
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40010000 	.word	0x40010000

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	4841      	ldr	r0, [pc, #260]	; (80003a8 <LoopForever+0x4>)
  msr   msp, r0          /* set stack pointer */
 80002a2:	f380 8808 	msr	MSP, r0
  msr   psp, r0          /* set stack pointer */
 80002a6:	f380 8809 	msr	PSP, r0

	// Store r6 passed by bootloader as gu32FirmwareOffset (earlier: r12)
	ldr r2, =gu32FirmwareOffset
 80002aa:	4a40      	ldr	r2, [pc, #256]	; (80003ac <LoopForever+0x8>)
	str r6, [r2]
 80002ac:	6016      	str	r6, [r2, #0]
	// Store r5 passed by bootloader as gu32FirmwareAbsPosition (earlier r11)
	ldr r2, =gu32FirmwareAbsPosition
 80002ae:	4a40      	ldr	r2, [pc, #256]	; (80003b0 <LoopForever+0xc>)
	str r5, [r2]
 80002b0:	6015      	str	r5, [r2, #0]
	movs r2, #0 // Cleanup
 80002b2:	2200      	movs	r2, #0
	movs r5, #0
 80002b4:	2500      	movs	r5, #0
	movs r6, #0
 80002b6:	2600      	movs	r6, #0

080002b8 <GotPatchLoopInit>:




GotPatchLoopInit:
	ldr r6, =gu32FirmwareOffset // Get firmware offset variable address
 80002b8:	4e3c      	ldr	r6, [pc, #240]	; (80003ac <LoopForever+0x8>)
	ldr r6, [r6]
 80002ba:	6836      	ldr	r6, [r6, #0]
	movs r0, #0 // Loop variable
 80002bc:	2000      	movs	r0, #0

080002be <GotPatchLoopCond>:
GotPatchLoopCond:
	ldr r1, = _got_start_ram
 80002be:	493d      	ldr	r1, [pc, #244]	; (80003b4 <LoopForever+0x10>)
	ldr r2, = _got_end_ram
 80002c0:	4a3d      	ldr	r2, [pc, #244]	; (80003b8 <LoopForever+0x14>)
	subs r2, r2, r1 // How many bytes is the lenght
 80002c2:	1a52      	subs	r2, r2, r1
	cmp r0, r2 // Check if loop is at end
 80002c4:	4290      	cmp	r0, r2
	beq GotPatchEnd // Jump to end if compare equal
 80002c6:	d018      	beq.n	80002fa <GotPatchEnd>

080002c8 <GotPatchLoopBody>:
GotPatchLoopBody:
	movs r1, r0 // Copy original loop counter value to r1
 80002c8:	0001      	movs	r1, r0
	adds r0, r0, #4 // Increase original loop counter r0
 80002ca:	3004      	adds	r0, #4
	ldr r2, = _got_start_ram // Load got ram start
 80002cc:	4a39      	ldr	r2, [pc, #228]	; (80003b4 <LoopForever+0x10>)
	ldr r3, = _ram_start // Load actual ram start
 80002ce:	4b3b      	ldr	r3, [pc, #236]	; (80003bc <LoopForever+0x18>)
	subs r2, r2, r3 // r2 now has plain got offset from where ever
 80002d0:	1ad2      	subs	r2, r2, r3
	ldr r3, = _flash_start // Start to assemble flash position
 80002d2:	4b3b      	ldr	r3, [pc, #236]	; (80003c0 <LoopForever+0x1c>)
	adds r3, r3, r6 // Add firmware offset, which is still at r6
 80002d4:	199b      	adds	r3, r3, r6
	adds r3, r3, r2 // Add plain offset
 80002d6:	189b      	adds	r3, r3, r2
	adds r3, r3, r1 // Add loop offset to reading from flash
 80002d8:	185b      	adds	r3, r3, r1
	ldr r3, [r3] // Load actual table data from flash
 80002da:	681b      	ldr	r3, [r3, #0]
	ldr r4, =_ram_start // Assemble limit to check if over start of ram, in which case don't modify (it is ram or a peripheral)
 80002dc:	4c37      	ldr	r4, [pc, #220]	; (80003bc <LoopForever+0x18>)
	cmp r3, r4 // Compare address from got and start of ram
 80002de:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address higher or same (hs) than start of ram, branch to copy got address as is
 80002e0:	d206      	bcs.n	80002f0 <GotStoreTableAddressToRam>
	ldr r4, =_flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 80002e2:	4c38      	ldr	r4, [pc, #224]	; (80003c4 <LoopForever+0x20>)
	cmp r3, r4 // Compare address from got and end of flash
 80002e4:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address address higher or same (hs) than end of flash, branch to store got table address data and hope for the best
 80002e6:	d203      	bcs.n	80002f0 <GotStoreTableAddressToRam>
	ldr r4, =_flash_start // Assemble limit to check if under start of flash, in which case something is just wrong, so branch to store and hope for the best
 80002e8:	4c35      	ldr	r4, [pc, #212]	; (80003c0 <LoopForever+0x1c>)
	cmp r3, r4 // Compare address from got and start of flash
 80002ea:	42a3      	cmp	r3, r4
	blo GotStoreTableAddressToRam // If address address lower (lo) than start of flash, branch to store got table address data and hope for the best
 80002ec:	d300      	bcc.n	80002f0 <GotStoreTableAddressToRam>
	adds r3, r3, r6 // Finally a position in flash. Add the offset.
 80002ee:	199b      	adds	r3, r3, r6

080002f0 <GotStoreTableAddressToRam>:
GotStoreTableAddressToRam:
	ldr r4, =_ram_start// Start getting address in ram where to put the table address value
 80002f0:	4c32      	ldr	r4, [pc, #200]	; (80003bc <LoopForever+0x18>)
	adds r4, r4, r2 // Add plain offset of got
 80002f2:	18a4      	adds	r4, r4, r2
	adds r4, r4, r1 // Add the original loop counter (is: 0, 4, 8, 12, ...)
 80002f4:	1864      	adds	r4, r4, r1
	str r3, [r4] // Add the table address to ram
 80002f6:	6023      	str	r3, [r4, #0]
	b GotPatchLoopCond // And go to check the loop
 80002f8:	e7e1      	b.n	80002be <GotPatchLoopCond>

080002fa <GotPatchEnd>:
GotPatchEnd:
	ldr r0, =_got_start_ram
 80002fa:	482e      	ldr	r0, [pc, #184]	; (80003b4 <LoopForever+0x10>)
	mov r9, r0 // Stupid trick to put global offset table location to r9
 80002fc:	4681      	mov	r9, r0
	movs r0, 0 // Cleaning up the rest, just in case
 80002fe:	2000      	movs	r0, #0
	movs r1, 0
 8000300:	2100      	movs	r1, #0
	movs r2, 0
 8000302:	2200      	movs	r2, #0
	movs r3, 0
 8000304:	2300      	movs	r3, #0
	movs r4, 0
 8000306:	2400      	movs	r4, #0
	movs r5, 0
 8000308:	2500      	movs	r5, #0
	movs r6, 0
 800030a:	2600      	movs	r6, #0
	movs r7, 0
 800030c:	2700      	movs	r7, #0




/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800030e:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000310:	e006      	b.n	8000320 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
	ldr r7, =gu32FirmwareOffset
 8000312:	4f26      	ldr	r7, [pc, #152]	; (80003ac <LoopForever+0x8>)
	ldr r7, [r7]
 8000314:	683f      	ldr	r7, [r7, #0]
	ldr	r3, =_sidata
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <LoopForever+0x24>)
	adds r3, r3, r7
 8000318:	19db      	adds	r3, r3, r7
	ldr	r3, [r3, r1]
 800031a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800031c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800031e:	3104      	adds	r1, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000320:	482a      	ldr	r0, [pc, #168]	; (80003cc <LoopForever+0x28>)
	ldr	r3, =_edata
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <LoopForever+0x2c>)
	adds	r2, r0, r1
 8000324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000328:	d3f3      	bcc.n	8000312 <CopyDataInit>
	ldr	r2, =_sbss
 800032a:	4a2a      	ldr	r2, [pc, #168]	; (80003d4 <LoopForever+0x30>)
	adds r2, r2, r7
 800032c:	19d2      	adds	r2, r2, r7
	b	LoopFillZerobss
 800032e:	e00a      	b.n	8000346 <LoopFillZerobss>

08000330 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000330:	2300      	movs	r3, #0
	adds r2, r2, #4 // Increment the loop counter already so ww avoid non-ending loops
 8000332:	3204      	adds	r2, #4
	ldr r4, =gu32FirmwareOffset // Get firmware offset variable address
 8000334:	4c1d      	ldr	r4, [pc, #116]	; (80003ac <LoopForever+0x8>)
	cmp r2, r4 // Compare address to the address we are going to zero
 8000336:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 8000338:	d005      	beq.n	8000346 <LoopFillZerobss>
	ldr r4, =gu32FirmwareAbsPosition // Get firmware abs position variable address
 800033a:	4c1d      	ldr	r4, [pc, #116]	; (80003b0 <LoopForever+0xc>)
	cmp r2, r4 // Compare address to the address we are going to zero
 800033c:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 800033e:	d002      	beq.n	8000346 <LoopFillZerobss>
	subs r2, r2, #4 // Remove our own increment which was needed for special cases
 8000340:	3a04      	subs	r2, #4
	str	r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
	adds r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
	ldr r7, =gu32FirmwareOffset
 8000346:	4f19      	ldr	r7, [pc, #100]	; (80003ac <LoopForever+0x8>)
	ldr r7, [r7]
 8000348:	683f      	ldr	r7, [r7, #0]
	ldr	r3, =_ebss
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <LoopForever+0x34>)
	cmp	r2, r3
 800034c:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800034e:	d3ef      	bcc.n	8000330 <FillZerobss>




/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000350:	f7ff ff90 	bl	8000274 <SystemInit>

08000354 <CallPreinitsInit>:



// Make our own __libc_init_array
CallPreinitsInit:
	ldr r7, =gu32FirmwareOffset
 8000354:	4f15      	ldr	r7, [pc, #84]	; (80003ac <LoopForever+0x8>)
	ldr r7, [r7]
 8000356:	683f      	ldr	r7, [r7, #0]
	ldr r0, =__preinit_array_start
 8000358:	4820      	ldr	r0, [pc, #128]	; (80003dc <LoopForever+0x38>)
	adds r0, r7
 800035a:	19c0      	adds	r0, r0, r7
	ldr r1, =__preinit_array_end
 800035c:	4920      	ldr	r1, [pc, #128]	; (80003e0 <LoopForever+0x3c>)
	adds r1, r7
 800035e:	19c9      	adds	r1, r1, r7

08000360 <CallPreinitsLoopCond>:
CallPreinitsLoopCond:
	cmp r0, r1
 8000360:	4288      	cmp	r0, r1
	beq CallPreinitsEnd// If same, it is at end, go away
 8000362:	d005      	beq.n	8000370 <CallPreinitsEnd>

08000364 <CallPreinitsLoop>:
CallPreinitsLoop:
	ldr r5, =__init_array_start
 8000364:	4d1f      	ldr	r5, [pc, #124]	; (80003e4 <LoopForever+0x40>)
	ldr r4, =__init_array_end // Yes, order is funny to say the least
 8000366:	4c20      	ldr	r4, [pc, #128]	; (80003e8 <LoopForever+0x44>)
	ldr r3, [r0]
 8000368:	6803      	ldr	r3, [r0, #0]
	blx r3
 800036a:	4798      	blx	r3
	adds r0, r0, #4
 800036c:	3004      	adds	r0, #4
	b CallPreinitsLoopCond
 800036e:	e7f7      	b.n	8000360 <CallPreinitsLoopCond>

08000370 <CallPreinitsEnd>:
CallPreinitsEnd:
	ldr r3, =_init
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <LoopForever+0x48>)
	adds r3, r7
 8000372:	19db      	adds	r3, r3, r7
	ldr r5, =__init_array_start
 8000374:	4d1b      	ldr	r5, [pc, #108]	; (80003e4 <LoopForever+0x40>)
	adds r5, r7
 8000376:	19ed      	adds	r5, r5, r7
	ldr r4, =__init_array_end
 8000378:	4c1b      	ldr	r4, [pc, #108]	; (80003e8 <LoopForever+0x44>)
	adds r4, r7
 800037a:	19e4      	adds	r4, r4, r7
	blx r3
 800037c:	4798      	blx	r3

0800037e <CallInitsInit>:

	// r4, r5 untouched or good, hopefully
CallInitsInit:
	ldr r7, =gu32FirmwareOffset
 800037e:	4f0b      	ldr	r7, [pc, #44]	; (80003ac <LoopForever+0x8>)
	ldr r7, [r7]
 8000380:	683f      	ldr	r7, [r7, #0]

08000382 <CallInitsLoopCond>:
CallInitsLoopCond:
	cmp r5, r4
 8000382:	42a5      	cmp	r5, r4
	beq CallInitsEnd
 8000384:	d004      	beq.n	8000390 <CallInitsEnd>

08000386 <CallInitsLoop>:
CallInitsLoop:
	ldr r3, [r5]
 8000386:	682b      	ldr	r3, [r5, #0]
	add r3, r3, r7
 8000388:	443b      	add	r3, r7
	blx r3
 800038a:	4798      	blx	r3
	adds r5, r5, #4
 800038c:	3504      	adds	r5, #4
	b CallInitsLoopCond
 800038e:	e7f8      	b.n	8000382 <CallInitsLoopCond>

08000390 <CallInitsEnd>:
CallInitsEnd:
	movs r0, #0
 8000390:	2000      	movs	r0, #0
	movs r1, #0
 8000392:	2100      	movs	r1, #0
	movs r2, #0
 8000394:	2200      	movs	r2, #0
	movs r3, #0
 8000396:	2300      	movs	r3, #0
	movs r4, #0
 8000398:	2400      	movs	r4, #0
	movs r5, #0
 800039a:	2500      	movs	r5, #0
	movs r6, #0
 800039c:	2600      	movs	r6, #0
	movs r7, #0
 800039e:	2700      	movs	r7, #0




/* Call the application's entry point.*/
  bl main
 80003a0:	f7ff febe 	bl	8000120 <main>

080003a4 <LoopForever>:

LoopForever:
    b LoopForever
 80003a4:	e7fe      	b.n	80003a4 <LoopForever>
 80003a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80003a8:	20004000 	.word	0x20004000
	ldr r2, =gu32FirmwareOffset
 80003ac:	200000fc 	.word	0x200000fc
	ldr r2, =gu32FirmwareAbsPosition
 80003b0:	200000f8 	.word	0x200000f8
	ldr r1, = _got_start_ram
 80003b4:	200000c0 	.word	0x200000c0
	ldr r2, = _got_end_ram
 80003b8:	200000cc 	.word	0x200000cc
	ldr r3, = _ram_start // Load actual ram start
 80003bc:	20000000 	.word	0x20000000
	ldr r3, = _flash_start // Start to assemble flash position
 80003c0:	08000000 	.word	0x08000000
	ldr r4, =_flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 80003c4:	08020000 	.word	0x08020000
	ldr	r3, =_sidata
 80003c8:	08000a80 	.word	0x08000a80
	ldr	r0, =_sdata
 80003cc:	200000d8 	.word	0x200000d8
	ldr	r3, =_edata
 80003d0:	200000dc 	.word	0x200000dc
	ldr	r2, =_sbss
 80003d4:	200000dc 	.word	0x200000dc
	ldr	r3, =_ebss
 80003d8:	2000014c 	.word	0x2000014c
	ldr r0, =__preinit_array_start
 80003dc:	08000a78 	.word	0x08000a78
	ldr r1, =__preinit_array_end
 80003e0:	08000a78 	.word	0x08000a78
	ldr r5, =__init_array_start
 80003e4:	08000a78 	.word	0x08000a78
	ldr r4, =__init_array_end // Yes, order is funny to say the least
 80003e8:	08000a7c 	.word	0x08000a7c
	ldr r3, =_init
 80003ec:	08000a61 	.word	0x08000a61

080003f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC1_IRQHandler>
	...

080003f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	464b      	mov	r3, r9
  uwTick += uwTickFreq;
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <HAL_IncTick+0x24>)
 80003fc:	589a      	ldr	r2, [r3, r2]
 80003fe:	7812      	ldrb	r2, [r2, #0]
 8000400:	0011      	movs	r1, r2
 8000402:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_IncTick+0x28>)
 8000404:	589a      	ldr	r2, [r3, r2]
 8000406:	6812      	ldr	r2, [r2, #0]
 8000408:	188a      	adds	r2, r1, r2
 800040a:	4904      	ldr	r1, [pc, #16]	; (800041c <HAL_IncTick+0x28>)
 800040c:	585b      	ldr	r3, [r3, r1]
 800040e:	601a      	str	r2, [r3, #0]
}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	00000000 	.word	0x00000000
 800041c:	00000004 	.word	0x00000004

08000420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	0002      	movs	r2, r0
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b7f      	cmp	r3, #127	; 0x7f
 8000432:	d809      	bhi.n	8000448 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	001a      	movs	r2, r3
 800043a:	231f      	movs	r3, #31
 800043c:	401a      	ands	r2, r3
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <__NVIC_EnableIRQ+0x30>)
 8000440:	2101      	movs	r1, #1
 8000442:	4091      	lsls	r1, r2
 8000444:	000a      	movs	r2, r1
 8000446:	601a      	str	r2, [r3, #0]
  }
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}
 8000450:	e000e100 	.word	0xe000e100

08000454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	0002      	movs	r2, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b7f      	cmp	r3, #127	; 0x7f
 8000468:	d828      	bhi.n	80004bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800046a:	4a2f      	ldr	r2, [pc, #188]	; (8000528 <__NVIC_SetPriority+0xd4>)
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	b25b      	sxtb	r3, r3
 8000472:	089b      	lsrs	r3, r3, #2
 8000474:	33c0      	adds	r3, #192	; 0xc0
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	589b      	ldr	r3, [r3, r2]
 800047a:	1dfa      	adds	r2, r7, #7
 800047c:	7812      	ldrb	r2, [r2, #0]
 800047e:	0011      	movs	r1, r2
 8000480:	2203      	movs	r2, #3
 8000482:	400a      	ands	r2, r1
 8000484:	00d2      	lsls	r2, r2, #3
 8000486:	21ff      	movs	r1, #255	; 0xff
 8000488:	4091      	lsls	r1, r2
 800048a:	000a      	movs	r2, r1
 800048c:	43d2      	mvns	r2, r2
 800048e:	401a      	ands	r2, r3
 8000490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	019b      	lsls	r3, r3, #6
 8000496:	22ff      	movs	r2, #255	; 0xff
 8000498:	401a      	ands	r2, r3
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	0018      	movs	r0, r3
 80004a0:	2303      	movs	r3, #3
 80004a2:	4003      	ands	r3, r0
 80004a4:	00db      	lsls	r3, r3, #3
 80004a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004a8:	481f      	ldr	r0, [pc, #124]	; (8000528 <__NVIC_SetPriority+0xd4>)
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	089b      	lsrs	r3, r3, #2
 80004b2:	430a      	orrs	r2, r1
 80004b4:	33c0      	adds	r3, #192	; 0xc0
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004ba:	e031      	b.n	8000520 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004bc:	4a1b      	ldr	r2, [pc, #108]	; (800052c <__NVIC_SetPriority+0xd8>)
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	0019      	movs	r1, r3
 80004c4:	230f      	movs	r3, #15
 80004c6:	400b      	ands	r3, r1
 80004c8:	3b08      	subs	r3, #8
 80004ca:	089b      	lsrs	r3, r3, #2
 80004cc:	3306      	adds	r3, #6
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	18d3      	adds	r3, r2, r3
 80004d2:	3304      	adds	r3, #4
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	1dfa      	adds	r2, r7, #7
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	0011      	movs	r1, r2
 80004dc:	2203      	movs	r2, #3
 80004de:	400a      	ands	r2, r1
 80004e0:	00d2      	lsls	r2, r2, #3
 80004e2:	21ff      	movs	r1, #255	; 0xff
 80004e4:	4091      	lsls	r1, r2
 80004e6:	000a      	movs	r2, r1
 80004e8:	43d2      	mvns	r2, r2
 80004ea:	401a      	ands	r2, r3
 80004ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	019b      	lsls	r3, r3, #6
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	401a      	ands	r2, r3
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	0018      	movs	r0, r3
 80004fc:	2303      	movs	r3, #3
 80004fe:	4003      	ands	r3, r0
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000504:	4809      	ldr	r0, [pc, #36]	; (800052c <__NVIC_SetPriority+0xd8>)
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	001c      	movs	r4, r3
 800050c:	230f      	movs	r3, #15
 800050e:	4023      	ands	r3, r4
 8000510:	3b08      	subs	r3, #8
 8000512:	089b      	lsrs	r3, r3, #2
 8000514:	430a      	orrs	r2, r1
 8000516:	3306      	adds	r3, #6
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	18c3      	adds	r3, r0, r3
 800051c:	3304      	adds	r3, #4
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b003      	add	sp, #12
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	e000e100 	.word	0xe000e100
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
 800053a:	210f      	movs	r1, #15
 800053c:	187b      	adds	r3, r7, r1
 800053e:	1c02      	adds	r2, r0, #0
 8000540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	187b      	adds	r3, r7, r1
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b25b      	sxtb	r3, r3
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff ff81 	bl	8000454 <__NVIC_SetPriority>
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b004      	add	sp, #16
 8000558:	bd80      	pop	{r7, pc}

0800055a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	0002      	movs	r2, r0
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b25b      	sxtb	r3, r3
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ff57 	bl	8000420 <__NVIC_EnableIRQ>
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}

0800057a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b084      	sub	sp, #16
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	000a      	movs	r2, r1
 8000584:	1cbb      	adds	r3, r7, #2
 8000586:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800058e:	1cbb      	adds	r3, r7, #2
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4013      	ands	r3, r2
 8000596:	041a      	lsls	r2, r3, #16
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	43db      	mvns	r3, r3
 800059c:	1cb9      	adds	r1, r7, #2
 800059e:	8809      	ldrh	r1, [r1, #0]
 80005a0:	400b      	ands	r3, r1
 80005a2:	431a      	orrs	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	619a      	str	r2, [r3, #24]
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b004      	add	sp, #16
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	e042      	b.n	8000648 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	223d      	movs	r2, #61	; 0x3d
 80005c6:	5c9b      	ldrb	r3, [r3, r2]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d107      	bne.n	80005de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	223c      	movs	r2, #60	; 0x3c
 80005d2:	2100      	movs	r1, #0
 80005d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff fdfd 	bl	80001d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	223d      	movs	r2, #61	; 0x3d
 80005e2:	2102      	movs	r1, #2
 80005e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3304      	adds	r3, #4
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f000 f9af 	bl	8000954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2246      	movs	r2, #70	; 0x46
 80005fa:	2101      	movs	r1, #1
 80005fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	223e      	movs	r2, #62	; 0x3e
 8000602:	2101      	movs	r1, #1
 8000604:	5499      	strb	r1, [r3, r2]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	223f      	movs	r2, #63	; 0x3f
 800060a:	2101      	movs	r1, #1
 800060c:	5499      	strb	r1, [r3, r2]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2240      	movs	r2, #64	; 0x40
 8000612:	2101      	movs	r1, #1
 8000614:	5499      	strb	r1, [r3, r2]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2241      	movs	r2, #65	; 0x41
 800061a:	2101      	movs	r1, #1
 800061c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2242      	movs	r2, #66	; 0x42
 8000622:	2101      	movs	r1, #1
 8000624:	5499      	strb	r1, [r3, r2]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2243      	movs	r2, #67	; 0x43
 800062a:	2101      	movs	r1, #1
 800062c:	5499      	strb	r1, [r3, r2]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2244      	movs	r2, #68	; 0x44
 8000632:	2101      	movs	r1, #1
 8000634:	5499      	strb	r1, [r3, r2]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2245      	movs	r2, #69	; 0x45
 800063a:	2101      	movs	r1, #1
 800063c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	223d      	movs	r2, #61	; 0x3d
 8000642:	2101      	movs	r1, #1
 8000644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000646:	2300      	movs	r3, #0
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}

08000650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	223d      	movs	r2, #61	; 0x3d
 800065c:	5c9b      	ldrb	r3, [r3, r2]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b01      	cmp	r3, #1
 8000662:	d001      	beq.n	8000668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000664:	2301      	movs	r3, #1
 8000666:	e035      	b.n	80006d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	223d      	movs	r2, #61	; 0x3d
 800066c:	2102      	movs	r1, #2
 800066e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2101      	movs	r1, #1
 800067c:	430a      	orrs	r2, r1
 800067e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <HAL_TIM_Base_Start_IT+0x8c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d009      	beq.n	800069e <HAL_TIM_Base_Start_IT+0x4e>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <HAL_TIM_Base_Start_IT+0x90>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d004      	beq.n	800069e <HAL_TIM_Base_Start_IT+0x4e>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_TIM_Base_Start_IT+0x94>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d111      	bne.n	80006c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	2207      	movs	r2, #7
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d010      	beq.n	80006d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2101      	movs	r1, #1
 80006bc:	430a      	orrs	r2, r1
 80006be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80006c0:	e007      	b.n	80006d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b004      	add	sp, #16
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40012c00 	.word	0x40012c00
 80006e0:	40000400 	.word	0x40000400
 80006e4:	40014000 	.word	0x40014000

080006e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	2202      	movs	r2, #2
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d124      	bne.n	8000748 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	2202      	movs	r2, #2
 8000706:	4013      	ands	r3, r2
 8000708:	2b02      	cmp	r3, #2
 800070a:	d11d      	bne.n	8000748 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2203      	movs	r2, #3
 8000712:	4252      	negs	r2, r2
 8000714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	2203      	movs	r2, #3
 8000724:	4013      	ands	r3, r2
 8000726:	d004      	beq.n	8000732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8fa 	bl	8000924 <HAL_TIM_IC_CaptureCallback>
 8000730:	e007      	b.n	8000742 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	0018      	movs	r0, r3
 8000736:	f000 f8ed 	bl	8000914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	0018      	movs	r0, r3
 800073e:	f000 f8f9 	bl	8000934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	2204      	movs	r2, #4
 8000750:	4013      	ands	r3, r2
 8000752:	2b04      	cmp	r3, #4
 8000754:	d125      	bne.n	80007a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	2204      	movs	r2, #4
 800075e:	4013      	ands	r3, r2
 8000760:	2b04      	cmp	r3, #4
 8000762:	d11e      	bne.n	80007a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2205      	movs	r2, #5
 800076a:	4252      	negs	r2, r2
 800076c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2202      	movs	r2, #2
 8000772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	23c0      	movs	r3, #192	; 0xc0
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4013      	ands	r3, r2
 8000780:	d004      	beq.n	800078c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f8cd 	bl	8000924 <HAL_TIM_IC_CaptureCallback>
 800078a:	e007      	b.n	800079c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f8c0 	bl	8000914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	0018      	movs	r0, r3
 8000798:	f000 f8cc 	bl	8000934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	2208      	movs	r2, #8
 80007aa:	4013      	ands	r3, r2
 80007ac:	2b08      	cmp	r3, #8
 80007ae:	d124      	bne.n	80007fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	2208      	movs	r2, #8
 80007b8:	4013      	ands	r3, r2
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d11d      	bne.n	80007fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2209      	movs	r2, #9
 80007c4:	4252      	negs	r2, r2
 80007c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2204      	movs	r2, #4
 80007cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	2203      	movs	r2, #3
 80007d6:	4013      	ands	r3, r2
 80007d8:	d004      	beq.n	80007e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f8a1 	bl	8000924 <HAL_TIM_IC_CaptureCallback>
 80007e2:	e007      	b.n	80007f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 f894 	bl	8000914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 f8a0 	bl	8000934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	2210      	movs	r2, #16
 8000802:	4013      	ands	r3, r2
 8000804:	2b10      	cmp	r3, #16
 8000806:	d125      	bne.n	8000854 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	2210      	movs	r2, #16
 8000810:	4013      	ands	r3, r2
 8000812:	2b10      	cmp	r3, #16
 8000814:	d11e      	bne.n	8000854 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2211      	movs	r2, #17
 800081c:	4252      	negs	r2, r2
 800081e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2208      	movs	r2, #8
 8000824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	69da      	ldr	r2, [r3, #28]
 800082c:	23c0      	movs	r3, #192	; 0xc0
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4013      	ands	r3, r2
 8000832:	d004      	beq.n	800083e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	0018      	movs	r0, r3
 8000838:	f000 f874 	bl	8000924 <HAL_TIM_IC_CaptureCallback>
 800083c:	e007      	b.n	800084e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	0018      	movs	r0, r3
 8000842:	f000 f867 	bl	8000914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	0018      	movs	r0, r3
 800084a:	f000 f873 	bl	8000934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	2b01      	cmp	r3, #1
 8000860:	d10f      	bne.n	8000882 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	2201      	movs	r2, #1
 800086a:	4013      	ands	r3, r2
 800086c:	2b01      	cmp	r3, #1
 800086e:	d108      	bne.n	8000882 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2202      	movs	r2, #2
 8000876:	4252      	negs	r2, r2
 8000878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff fc8f 	bl	80001a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	691b      	ldr	r3, [r3, #16]
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	4013      	ands	r3, r2
 800088c:	2b80      	cmp	r3, #128	; 0x80
 800088e:	d10f      	bne.n	80008b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	4013      	ands	r3, r2
 800089a:	2b80      	cmp	r3, #128	; 0x80
 800089c:	d108      	bne.n	80008b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2281      	movs	r2, #129	; 0x81
 80008a4:	4252      	negs	r2, r2
 80008a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f8d0 	bl	8000a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	4013      	ands	r3, r2
 80008ba:	2b40      	cmp	r3, #64	; 0x40
 80008bc:	d10f      	bne.n	80008de <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	2240      	movs	r2, #64	; 0x40
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	d108      	bne.n	80008de <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2241      	movs	r2, #65	; 0x41
 80008d2:	4252      	negs	r2, r2
 80008d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 f833 	bl	8000944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	2220      	movs	r2, #32
 80008e6:	4013      	ands	r3, r2
 80008e8:	2b20      	cmp	r3, #32
 80008ea:	d10f      	bne.n	800090c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	2220      	movs	r2, #32
 80008f4:	4013      	ands	r3, r2
 80008f6:	2b20      	cmp	r3, #32
 80008f8:	d108      	bne.n	800090c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2221      	movs	r2, #33	; 0x21
 8000900:	4252      	negs	r2, r2
 8000902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f89a 	bl	8000a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b002      	add	sp, #8
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}

08000944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <TIM_Base_SetConfig+0xd0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d003      	beq.n	8000974 <TIM_Base_SetConfig+0x20>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <TIM_Base_SetConfig+0xd4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d108      	bne.n	8000986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2270      	movs	r2, #112	; 0x70
 8000978:	4393      	bics	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4313      	orrs	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <TIM_Base_SetConfig+0xd0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <TIM_Base_SetConfig+0x62>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <TIM_Base_SetConfig+0xd4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00f      	beq.n	80009b6 <TIM_Base_SetConfig+0x62>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <TIM_Base_SetConfig+0xd8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d00b      	beq.n	80009b6 <TIM_Base_SetConfig+0x62>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <TIM_Base_SetConfig+0xdc>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d007      	beq.n	80009b6 <TIM_Base_SetConfig+0x62>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <TIM_Base_SetConfig+0xe0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d003      	beq.n	80009b6 <TIM_Base_SetConfig+0x62>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <TIM_Base_SetConfig+0xe4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d108      	bne.n	80009c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <TIM_Base_SetConfig+0xe8>)
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	4393      	bics	r3, r2
 80009ce:	001a      	movs	r2, r3
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <TIM_Base_SetConfig+0xd0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00b      	beq.n	8000a0e <TIM_Base_SetConfig+0xba>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <TIM_Base_SetConfig+0xdc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <TIM_Base_SetConfig+0xba>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <TIM_Base_SetConfig+0xe0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d003      	beq.n	8000a0e <TIM_Base_SetConfig+0xba>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <TIM_Base_SetConfig+0xe4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d103      	bne.n	8000a16 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	615a      	str	r2, [r3, #20]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b004      	add	sp, #16
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	40002000 	.word	0x40002000
 8000a30:	40014000 	.word	0x40014000
 8000a34:	40014400 	.word	0x40014400
 8000a38:	40014800 	.word	0x40014800
 8000a3c:	fffffcff 	.word	0xfffffcff

08000a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_init>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr

08000a6c <_fini>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr
