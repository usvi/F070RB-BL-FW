
F070RB_Firmware_anywhere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  20000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .got          0000001c  200000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  200000dc  080000dc  000100dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00001344  080000e8  080000e8  000100e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000030  0800142c  0800142c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800145c  0800145c  000200f4  2**0
                  CONTENTS
  6 .ARM          00000000  0800145c  0800145c  000200f4  2**0
                  CONTENTS
  7 .preinit_array 00000000  0800145c  0800145c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800145c  0800145c  0001145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000000c  200000e8  08001464  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000028  200000f4  08001470  000200f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000011c  08001470  0002011c  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002b1b  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000e09  00000000  00000000  00022c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000350  00000000  00000000  00023a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000002c8  00000000  00000000  00023d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000e946  00000000  00000000  00024058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000467e  00000000  00000000  0003299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00057c40  00000000  00000000  0003701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0008ec5c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000009dc  00000000  00000000  0008ecb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000e8 <__do_global_dtors_aux>:
 80000e8:	b510      	push	{r4, lr}
 80000ea:	4c06      	ldr	r4, [pc, #24]	; (8000104 <__do_global_dtors_aux+0x1c>)
 80000ec:	7823      	ldrb	r3, [r4, #0]
 80000ee:	2b00      	cmp	r3, #0
 80000f0:	d107      	bne.n	8000102 <__do_global_dtors_aux+0x1a>
 80000f2:	4b05      	ldr	r3, [pc, #20]	; (8000108 <__do_global_dtors_aux+0x20>)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d002      	beq.n	80000fe <__do_global_dtors_aux+0x16>
 80000f8:	4804      	ldr	r0, [pc, #16]	; (800010c <__do_global_dtors_aux+0x24>)
 80000fa:	e000      	b.n	80000fe <__do_global_dtors_aux+0x16>
 80000fc:	bf00      	nop
 80000fe:	2301      	movs	r3, #1
 8000100:	7023      	strb	r3, [r4, #0]
 8000102:	bd10      	pop	{r4, pc}
 8000104:	200000f4 	.word	0x200000f4
 8000108:	00000000 	.word	0x00000000
 800010c:	08001414 	.word	0x08001414

08000110 <frame_dummy>:
 8000110:	4b04      	ldr	r3, [pc, #16]	; (8000124 <frame_dummy+0x14>)
 8000112:	b510      	push	{r4, lr}
 8000114:	2b00      	cmp	r3, #0
 8000116:	d003      	beq.n	8000120 <frame_dummy+0x10>
 8000118:	4903      	ldr	r1, [pc, #12]	; (8000128 <frame_dummy+0x18>)
 800011a:	4804      	ldr	r0, [pc, #16]	; (800012c <frame_dummy+0x1c>)
 800011c:	e000      	b.n	8000120 <frame_dummy+0x10>
 800011e:	bf00      	nop
 8000120:	bd10      	pop	{r4, pc}
 8000122:	46c0      	nop			; (mov r8, r8)
 8000124:	00000000 	.word	0x00000000
 8000128:	200000f8 	.word	0x200000f8
 800012c:	08001414 	.word	0x08001414

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  uint32_t u32LedCounter = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000252:	f000 f9b3 	bl	80005bc <HAL_Init>
  SystemClock_Config();
 8000256:	f000 f816 	bl	8000286 <SystemClock_Config>
  MX_GPIO_Init();
 800025a:	f000 f85f 	bl	800031c <MX_GPIO_Init>

  while (1)
  {
    u32LedCounter++;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	3301      	adds	r3, #1
 8000262:	607b      	str	r3, [r7, #4]

    if ((u32LedCounter % 0xA0000) == 0)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	22a0      	movs	r2, #160	; 0xa0
 8000268:	0311      	lsls	r1, r2, #12
 800026a:	0018      	movs	r0, r3
 800026c:	f7ff ffe6 	bl	800023c <__aeabi_uidivmod>
 8000270:	1e0b      	subs	r3, r1, #0
 8000272:	d1f4      	bne.n	800025e <main+0x16>
    {
      u32LedCounter = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	607b      	str	r3, [r7, #4]
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000278:	2390      	movs	r3, #144	; 0x90
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	2120      	movs	r1, #32
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fc4b 	bl	8000b1a <HAL_GPIO_TogglePin>
    u32LedCounter++;
 8000284:	e7eb      	b.n	800025e <main+0x16>

08000286 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000286:	b590      	push	{r4, r7, lr}
 8000288:	b091      	sub	sp, #68	; 0x44
 800028a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028c:	2410      	movs	r4, #16
 800028e:	193b      	adds	r3, r7, r4
 8000290:	0018      	movs	r0, r3
 8000292:	2330      	movs	r3, #48	; 0x30
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f001 f8b4 	bl	8001404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	003b      	movs	r3, r7
 800029e:	0018      	movs	r0, r3
 80002a0:	2310      	movs	r3, #16
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f001 f8ad 	bl	8001404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	0021      	movs	r1, r4
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2202      	movs	r2, #2
 80002b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2201      	movs	r2, #1
 80002b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2210      	movs	r2, #16
 80002bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2202      	movs	r2, #2
 80002c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2280      	movs	r2, #128	; 0x80
 80002c8:	0212      	lsls	r2, r2, #8
 80002ca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	0352      	lsls	r2, r2, #13
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fc37 	bl	8000b50 <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002e6:	f000 f883 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	003b      	movs	r3, r7
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2202      	movs	r2, #2
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000302:	003b      	movs	r3, r7
 8000304:	2101      	movs	r1, #1
 8000306:	0018      	movs	r0, r3
 8000308:	f000 ff40 	bl	800118c <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000310:	f000 f86e 	bl	80003f0 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b011      	add	sp, #68	; 0x44
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	240c      	movs	r4, #12
 8000324:	193b      	adds	r3, r7, r4
 8000326:	0018      	movs	r0, r3
 8000328:	2314      	movs	r3, #20
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f001 f869 	bl	8001404 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <MX_GPIO_Init+0xc8>)
 8000334:	695a      	ldr	r2, [r3, #20]
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <MX_GPIO_Init+0xc8>)
 8000338:	2180      	movs	r1, #128	; 0x80
 800033a:	0309      	lsls	r1, r1, #12
 800033c:	430a      	orrs	r2, r1
 800033e:	615a      	str	r2, [r3, #20]
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <MX_GPIO_Init+0xc8>)
 8000342:	695a      	ldr	r2, [r3, #20]
 8000344:	2380      	movs	r3, #128	; 0x80
 8000346:	031b      	lsls	r3, r3, #12
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <MX_GPIO_Init+0xc8>)
 8000350:	695a      	ldr	r2, [r3, #20]
 8000352:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <MX_GPIO_Init+0xc8>)
 8000354:	2180      	movs	r1, #128	; 0x80
 8000356:	03c9      	lsls	r1, r1, #15
 8000358:	430a      	orrs	r2, r1
 800035a:	615a      	str	r2, [r3, #20]
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <MX_GPIO_Init+0xc8>)
 800035e:	695a      	ldr	r2, [r3, #20]
 8000360:	2380      	movs	r3, #128	; 0x80
 8000362:	03db      	lsls	r3, r3, #15
 8000364:	4013      	ands	r3, r2
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036a:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <MX_GPIO_Init+0xc8>)
 800036c:	695a      	ldr	r2, [r3, #20]
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_GPIO_Init+0xc8>)
 8000370:	2180      	movs	r1, #128	; 0x80
 8000372:	0289      	lsls	r1, r1, #10
 8000374:	430a      	orrs	r2, r1
 8000376:	615a      	str	r2, [r3, #20]
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_GPIO_Init+0xc8>)
 800037a:	695a      	ldr	r2, [r3, #20]
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	029b      	lsls	r3, r3, #10
 8000380:	4013      	ands	r3, r2
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000386:	2390      	movs	r3, #144	; 0x90
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fba6 	bl	8000ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	0192      	lsls	r2, r2, #6
 800039a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800039c:	193b      	adds	r3, r7, r4
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <MX_GPIO_Init+0xcc>)
 80003a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	193b      	adds	r3, r7, r4
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	4a10      	ldr	r2, [pc, #64]	; (80003ec <MX_GPIO_Init+0xd0>)
 80003ac:	0019      	movs	r1, r3
 80003ae:	0010      	movs	r0, r2
 80003b0:	f000 fa26 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003b4:	0021      	movs	r1, r4
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2220      	movs	r2, #32
 80003ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2201      	movs	r2, #1
 80003c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ce:	187a      	adds	r2, r7, r1
 80003d0:	2390      	movs	r3, #144	; 0x90
 80003d2:	05db      	lsls	r3, r3, #23
 80003d4:	0011      	movs	r1, r2
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 fa12 	bl	8000800 <HAL_GPIO_Init>

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b009      	add	sp, #36	; 0x24
 80003e2:	bd90      	pop	{r4, r7, pc}
 80003e4:	40021000 	.word	0x40021000
 80003e8:	10210000 	.word	0x10210000
 80003ec:	48000800 	.word	0x48000800

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x44>)
 8000404:	699a      	ldr	r2, [r3, #24]
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <HAL_MspInit+0x44>)
 8000408:	2101      	movs	r1, #1
 800040a:	430a      	orrs	r2, r1
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	2201      	movs	r2, #1
 8000414:	4013      	ands	r3, r2
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <HAL_MspInit+0x44>)
 800041c:	69da      	ldr	r2, [r3, #28]
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <HAL_MspInit+0x44>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0549      	lsls	r1, r1, #21
 8000424:	430a      	orrs	r2, r1
 8000426:	61da      	str	r2, [r3, #28]
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_MspInit+0x44>)
 800042a:	69da      	ldr	r2, [r3, #28]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	055b      	lsls	r3, r3, #21
 8000430:	4013      	ands	r3, r2
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	40021000 	.word	0x40021000

08000444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <NMI_Handler+0x4>

0800044a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0x4>

08000450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000468:	f000 f8f4 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	483c      	ldr	r0, [pc, #240]	; (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0

	// Store r7 passed by bootloader as gu32FirmwareOffset (earlier: r12)
	ldr r2, =gu32FirmwareOffset
 8000480:	4a3c      	ldr	r2, [pc, #240]	; (8000574 <LoopForever+0x6>)
	str r7, [r2]
 8000482:	6017      	str	r7, [r2, #0]
	// Store r6 passed by bootloader as gu32FirmwareAbsPosition (earlier r11)
	ldr r2, =gu32FirmwareAbsPosition
 8000484:	4a3c      	ldr	r2, [pc, #240]	; (8000578 <LoopForever+0xa>)
	str r6, [r2]
 8000486:	6016      	str	r6, [r2, #0]
	movs r2, #0
 8000488:	2200      	movs	r2, #0

0800048a <GotPatchLoopInit>:
	// Lets leave offset to r7 and abs to r6

GotPatchLoopInit:
	movs r0, #0 // Loop variable
 800048a:	2000      	movs	r0, #0

0800048c <GotPatchLoopCond>:
GotPatchLoopCond:
	ldr r1, = _got_start_ram
 800048c:	493b      	ldr	r1, [pc, #236]	; (800057c <LoopForever+0xe>)
	ldr r2, = _got_end_ram
 800048e:	4a3c      	ldr	r2, [pc, #240]	; (8000580 <LoopForever+0x12>)
	subs r2, r2, r1 // How many bytes is the lenght
 8000490:	1a52      	subs	r2, r2, r1
	cmp r0, r2 // Check if loop is at end
 8000492:	4290      	cmp	r0, r2
	beq GotPatchEnd // Jump to end if compare equal
 8000494:	d018      	beq.n	80004c8 <GotPatchEnd>

08000496 <GotPatchLoopBody>:
GotPatchLoopBody:
	movs r1, r0 // Copy original loop counter value to r1
 8000496:	0001      	movs	r1, r0
	adds r0, r0, #4 // Increase original loop counter r0
 8000498:	3004      	adds	r0, #4
	ldr r2, = _got_start_ram // Load got ram start
 800049a:	4a38      	ldr	r2, [pc, #224]	; (800057c <LoopForever+0xe>)
	ldr r3, = _ram_start // Load actual ram start
 800049c:	4b39      	ldr	r3, [pc, #228]	; (8000584 <LoopForever+0x16>)
	subs r2, r2, r3 // r2 now has plain got offset from where ever
 800049e:	1ad2      	subs	r2, r2, r3
	ldr r3, = _flash_start // Start to assemble flash position
 80004a0:	4b39      	ldr	r3, [pc, #228]	; (8000588 <LoopForever+0x1a>)
	adds r3, r3, r7 // Add firmware offset, which is still at r7
 80004a2:	19db      	adds	r3, r3, r7
	adds r3, r3, r2 // Add plain offset
 80004a4:	189b      	adds	r3, r3, r2
	adds r3, r3, r1 // Add loop offset to reading from flash
 80004a6:	185b      	adds	r3, r3, r1
	ldr r3, [r3] // Load actual table data from flash
 80004a8:	681b      	ldr	r3, [r3, #0]
	ldr r4, =_ram_start // Assemble limit to check if over start of ram, in which case don't modify (it is ram or a peripheral)
 80004aa:	4c36      	ldr	r4, [pc, #216]	; (8000584 <LoopForever+0x16>)
	cmp r3, r4 // Compare address from got and start of ram
 80004ac:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address higher or same (hs) than start of ram, branch to copy got address as is
 80004ae:	d206      	bcs.n	80004be <GotStoreTableAddressToRam>
	ldr r4, =_flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 80004b0:	4c36      	ldr	r4, [pc, #216]	; (800058c <LoopForever+0x1e>)
	cmp r3, r4 // Compare address from got and end of flash
 80004b2:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address address higher or same (hs) than end of flash, branch to store got table address data and hope for the best
 80004b4:	d203      	bcs.n	80004be <GotStoreTableAddressToRam>
	ldr r4, =_flash_start // Assemble limit to check if under start of flash, in which case something is just wrong, so branch to store and hope for the best
 80004b6:	4c34      	ldr	r4, [pc, #208]	; (8000588 <LoopForever+0x1a>)
	cmp r3, r4 // Compare address from got and start of flash
 80004b8:	42a3      	cmp	r3, r4
	blo GotStoreTableAddressToRam // If address address lower (lo) than start of flash, branch to store got table address data and hope for the best
 80004ba:	d300      	bcc.n	80004be <GotStoreTableAddressToRam>
	adds r3, r3, r7 // Finally a position in flash. Add the offset.
 80004bc:	19db      	adds	r3, r3, r7

080004be <GotStoreTableAddressToRam>:
GotStoreTableAddressToRam:
	ldr r4, =_ram_start// Start getting address in ram where to put the table address value
 80004be:	4c31      	ldr	r4, [pc, #196]	; (8000584 <LoopForever+0x16>)
	adds r4, r4, r2 // Add plain offset of got
 80004c0:	18a4      	adds	r4, r4, r2
	adds r4, r4, r1 // Add the original loop counter (is: 0, 4, 8, 12, ...)
 80004c2:	1864      	adds	r4, r4, r1
	str r3, [r4] // Add the table address to ram
 80004c4:	6023      	str	r3, [r4, #0]
	b GotPatchLoopCond // And go to check the loop
 80004c6:	e7e1      	b.n	800048c <GotPatchLoopCond>

080004c8 <GotPatchEnd>:
GotPatchEnd:
	ldr r0, =_got_start_ram
 80004c8:	482c      	ldr	r0, [pc, #176]	; (800057c <LoopForever+0xe>)
	mov r9, r0 // Stupid trick to put global offset table location to r9
 80004ca:	4681      	mov	r9, r0
	movs r0, 0 // Cleaning up the rest, just in case
 80004cc:	2000      	movs	r0, #0
	movs r1, 0
 80004ce:	2100      	movs	r1, #0
	movs r2, 0
 80004d0:	2200      	movs	r2, #0
	movs r3, 0
 80004d2:	2300      	movs	r3, #0
	movs r4, 0
 80004d4:	2400      	movs	r4, #0
	movs r5, 0
 80004d6:	2500      	movs	r5, #0
	movs r6, 0
 80004d8:	2600      	movs	r6, #0
	movs r7, 0
 80004da:	2700      	movs	r7, #0




/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004de:	e006      	b.n	80004ee <LoopCopyDataInit>

080004e0 <CopyDataInit>:

CopyDataInit:
	ldr r7, =gu32FirmwareOffset
 80004e0:	4f24      	ldr	r7, [pc, #144]	; (8000574 <LoopForever+0x6>)
	ldr r7, [r7]
 80004e2:	683f      	ldr	r7, [r7, #0]
	ldr	r3, =_sidata
 80004e4:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <LoopForever+0x22>)
	adds r3, r3, r7
 80004e6:	19db      	adds	r3, r3, r7
	ldr	r3, [r3, r1]
 80004e8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004ea:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004ec:	3104      	adds	r1, #4

080004ee <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004ee:	4829      	ldr	r0, [pc, #164]	; (8000594 <LoopForever+0x26>)
	ldr	r3, =_edata
 80004f0:	4b29      	ldr	r3, [pc, #164]	; (8000598 <LoopForever+0x2a>)
	adds	r2, r0, r1
 80004f2:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004f4:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004f6:	d3f3      	bcc.n	80004e0 <CopyDataInit>
	ldr	r2, =_sbss
 80004f8:	4a28      	ldr	r2, [pc, #160]	; (800059c <LoopForever+0x2e>)
	adds r2, r2, r7
 80004fa:	19d2      	adds	r2, r2, r7
	b	LoopFillZerobss
 80004fc:	e00a      	b.n	8000514 <LoopFillZerobss>

080004fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004fe:	2300      	movs	r3, #0
	adds r2, r2, #4 // Increment the loop counter already so ww avoid non-ending loops
 8000500:	3204      	adds	r2, #4
	ldr r4, =gu32FirmwareOffset // Get firmware offset variable address
 8000502:	4c1c      	ldr	r4, [pc, #112]	; (8000574 <LoopForever+0x6>)
	cmp r2, r4 // Compare address to the address we are going to zero
 8000504:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 8000506:	d005      	beq.n	8000514 <LoopFillZerobss>
	ldr r4, =gu32FirmwareAbsPosition // Get firmware abs position variable address
 8000508:	4c1b      	ldr	r4, [pc, #108]	; (8000578 <LoopForever+0xa>)
	cmp r2, r4 // Compare address to the address we are going to zero
 800050a:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 800050c:	d002      	beq.n	8000514 <LoopFillZerobss>
	subs r2, r2, #4 // Remove our own increment which was needed for special cases
 800050e:	3a04      	subs	r2, #4
	str	r3, [r2]
 8000510:	6013      	str	r3, [r2, #0]
	adds r2, #4
 8000512:	3204      	adds	r2, #4

08000514 <LoopFillZerobss>:

LoopFillZerobss:
	ldr r7, =gu32FirmwareOffset
 8000514:	4f17      	ldr	r7, [pc, #92]	; (8000574 <LoopForever+0x6>)
	ldr r7, [r7]
 8000516:	683f      	ldr	r7, [r7, #0]
	ldr	r3, =_ebss
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <LoopForever+0x32>)
	cmp	r2, r3
 800051a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800051c:	d3ef      	bcc.n	80004fe <FillZerobss>




/* Call the clock system intitialization function.*/
  bl  SystemInit
 800051e:	f7ff ffa8 	bl	8000472 <SystemInit>

08000522 <CallPreinitsInit>:



// Make our own __libc_init_array
CallPreinitsInit:
	ldr r7, =gu32FirmwareOffset
 8000522:	4f14      	ldr	r7, [pc, #80]	; (8000574 <LoopForever+0x6>)
	ldr r7, [r7]
 8000524:	683f      	ldr	r7, [r7, #0]
	ldr r0, =__preinit_array_start
 8000526:	481f      	ldr	r0, [pc, #124]	; (80005a4 <LoopForever+0x36>)
	adds r0, r7
 8000528:	19c0      	adds	r0, r0, r7
	ldr r1, =__preinit_array_end
 800052a:	491f      	ldr	r1, [pc, #124]	; (80005a8 <LoopForever+0x3a>)
	adds r1, r7
 800052c:	19c9      	adds	r1, r1, r7

0800052e <CallPreinitsLoopCond>:
CallPreinitsLoopCond:
	cmp r0, r1
 800052e:	4288      	cmp	r0, r1
	beq CallPreinitsEnd// If same, it is at end, go away
 8000530:	d005      	beq.n	800053e <CallPreinitsEnd>

08000532 <CallPreinitsLoop>:
CallPreinitsLoop:
	ldr r5, =__init_array_start
 8000532:	4d1e      	ldr	r5, [pc, #120]	; (80005ac <LoopForever+0x3e>)
	ldr r4, =__init_array_end // Yes, order is funny to say the least
 8000534:	4c1e      	ldr	r4, [pc, #120]	; (80005b0 <LoopForever+0x42>)
	ldr r3, [r0]
 8000536:	6803      	ldr	r3, [r0, #0]
	blx r3
 8000538:	4798      	blx	r3
	adds r0, r0, #4
 800053a:	3004      	adds	r0, #4
	b CallPreinitsLoopCond
 800053c:	e7f7      	b.n	800052e <CallPreinitsLoopCond>

0800053e <CallPreinitsEnd>:
CallPreinitsEnd:

	ldr r3, =_init
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <LoopForever+0x46>)
	adds r3, r7
 8000540:	19db      	adds	r3, r3, r7
	ldr r5, =__init_array_start
 8000542:	4d1a      	ldr	r5, [pc, #104]	; (80005ac <LoopForever+0x3e>)
	adds r5, r7
 8000544:	19ed      	adds	r5, r5, r7
	ldr r4, =__init_array_end
 8000546:	4c1a      	ldr	r4, [pc, #104]	; (80005b0 <LoopForever+0x42>)
	adds r4, r7
 8000548:	19e4      	adds	r4, r4, r7
	blx r3
 800054a:	4798      	blx	r3

0800054c <CallInitsInit>:

	// r4, r5 untouched or good, hopefully
CallInitsInit:
CallInitsLoopCond:
	cmp r5, r4
 800054c:	42a5      	cmp	r5, r4
	beq CallInitsEnd
 800054e:	d004      	beq.n	800055a <CallInitsEnd>

08000550 <CallInitsLoop>:
CallInitsLoop:
	ldr r3, [r5]
 8000550:	682b      	ldr	r3, [r5, #0]
	add r3, r3, r12
 8000552:	4463      	add	r3, ip
	blx r3
 8000554:	4798      	blx	r3
	adds r5, r5, #4
 8000556:	3504      	adds	r5, #4
	b CallInitsLoopCond
 8000558:	e7f8      	b.n	800054c <CallInitsInit>

0800055a <CallInitsEnd>:
CallInitsEnd:
	movs r0, #0
 800055a:	2000      	movs	r0, #0
	movs r1, #0
 800055c:	2100      	movs	r1, #0
	movs r2, #0
 800055e:	2200      	movs	r2, #0
	movs r3, #0
 8000560:	2300      	movs	r3, #0
	movs r4, #0
 8000562:	2400      	movs	r4, #0
	movs r5, #0
 8000564:	2500      	movs	r5, #0
	movs r6, #0
 8000566:	2600      	movs	r6, #0
	movs r7, #0
 8000568:	2700      	movs	r7, #0




/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe6d 	bl	8000248 <main>

0800056e <LoopForever>:

LoopForever:
    b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20004000 	.word	0x20004000
	ldr r2, =gu32FirmwareOffset
 8000574:	20000114 	.word	0x20000114
	ldr r2, =gu32FirmwareAbsPosition
 8000578:	20000110 	.word	0x20000110
	ldr r1, = _got_start_ram
 800057c:	200000c0 	.word	0x200000c0
	ldr r2, = _got_end_ram
 8000580:	200000dc 	.word	0x200000dc
	ldr r3, = _ram_start // Load actual ram start
 8000584:	20000000 	.word	0x20000000
	ldr r3, = _flash_start // Start to assemble flash position
 8000588:	08000000 	.word	0x08000000
	ldr r4, =_flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 800058c:	08020000 	.word	0x08020000
	ldr	r3, =_sidata
 8000590:	08001464 	.word	0x08001464
	ldr	r0, =_sdata
 8000594:	200000e8 	.word	0x200000e8
	ldr	r3, =_edata
 8000598:	200000f4 	.word	0x200000f4
	ldr	r2, =_sbss
 800059c:	200000f4 	.word	0x200000f4
	ldr	r3, =_ebss
 80005a0:	2000011c 	.word	0x2000011c
	ldr r0, =__preinit_array_start
 80005a4:	0800145c 	.word	0x0800145c
	ldr r1, =__preinit_array_end
 80005a8:	0800145c 	.word	0x0800145c
	ldr r5, =__init_array_start
 80005ac:	0800145c 	.word	0x0800145c
	ldr r4, =__init_array_end // Yes, order is funny to say the least
 80005b0:	08001460 	.word	0x08001460
	ldr r3, =_init
 80005b4:	08001415 	.word	0x08001415

080005b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_IRQHandler>
	...

080005bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_Init+0x24>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_Init+0x24>)
 80005c6:	2110      	movs	r1, #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 f809 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d2:	f7ff ff13 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	464c      	mov	r4, r9
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_InitTick+0x64>)
 80005f0:	58e3      	ldr	r3, [r4, r3]
 80005f2:	681d      	ldr	r5, [r3, #0]
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_InitTick+0x68>)
 80005f6:	58e3      	ldr	r3, [r4, r3]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	0019      	movs	r1, r3
 80005fc:	23fa      	movs	r3, #250	; 0xfa
 80005fe:	0098      	lsls	r0, r3, #2
 8000600:	f7ff fd96 	bl	8000130 <__udivsi3>
 8000604:	0003      	movs	r3, r0
 8000606:	0019      	movs	r1, r3
 8000608:	0028      	movs	r0, r5
 800060a:	f7ff fd91 	bl	8000130 <__udivsi3>
 800060e:	0003      	movs	r3, r0
 8000610:	0018      	movs	r0, r3
 8000612:	f000 f8e8 	bl	80007e6 <HAL_SYSTICK_Config>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e010      	b.n	8000640 <HAL_InitTick+0x5c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b03      	cmp	r3, #3
 8000622:	d80c      	bhi.n	800063e <HAL_InitTick+0x5a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	425b      	negs	r3, r3
 800062a:	2200      	movs	r2, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f000 f8c5 	bl	80007bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_InitTick+0x6c>)
 8000634:	58e3      	ldr	r3, [r4, r3]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x5c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b002      	add	sp, #8
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	00000008 	.word	0x00000008
 800064c:	0000000c 	.word	0x0000000c
 8000650:	00000014 	.word	0x00000014

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
 8000658:	464b      	mov	r3, r9
  uwTick += uwTickFreq;
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_IncTick+0x24>)
 800065c:	589a      	ldr	r2, [r3, r2]
 800065e:	7812      	ldrb	r2, [r2, #0]
 8000660:	0011      	movs	r1, r2
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <HAL_IncTick+0x28>)
 8000664:	589a      	ldr	r2, [r3, r2]
 8000666:	6812      	ldr	r2, [r2, #0]
 8000668:	188a      	adds	r2, r1, r2
 800066a:	4904      	ldr	r1, [pc, #16]	; (800067c <HAL_IncTick+0x28>)
 800066c:	585b      	ldr	r3, [r3, r1]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	0000000c 	.word	0x0000000c
 800067c:	00000010 	.word	0x00000010

08000680 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
 8000684:	464b      	mov	r3, r9
  return uwTick;
 8000686:	4a03      	ldr	r2, [pc, #12]	; (8000694 <HAL_GetTick+0x14>)
 8000688:	589b      	ldr	r3, [r3, r2]
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	00000010 	.word	0x00000010

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	0002      	movs	r2, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b7f      	cmp	r3, #127	; 0x7f
 80006ac:	d828      	bhi.n	8000700 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ae:	4a2f      	ldr	r2, [pc, #188]	; (800076c <__NVIC_SetPriority+0xd4>)
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	089b      	lsrs	r3, r3, #2
 80006b8:	33c0      	adds	r3, #192	; 0xc0
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	589b      	ldr	r3, [r3, r2]
 80006be:	1dfa      	adds	r2, r7, #7
 80006c0:	7812      	ldrb	r2, [r2, #0]
 80006c2:	0011      	movs	r1, r2
 80006c4:	2203      	movs	r2, #3
 80006c6:	400a      	ands	r2, r1
 80006c8:	00d2      	lsls	r2, r2, #3
 80006ca:	21ff      	movs	r1, #255	; 0xff
 80006cc:	4091      	lsls	r1, r2
 80006ce:	000a      	movs	r2, r1
 80006d0:	43d2      	mvns	r2, r2
 80006d2:	401a      	ands	r2, r3
 80006d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	019b      	lsls	r3, r3, #6
 80006da:	22ff      	movs	r2, #255	; 0xff
 80006dc:	401a      	ands	r2, r3
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	0018      	movs	r0, r3
 80006e4:	2303      	movs	r3, #3
 80006e6:	4003      	ands	r3, r0
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <__NVIC_SetPriority+0xd4>)
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	430a      	orrs	r2, r1
 80006f8:	33c0      	adds	r3, #192	; 0xc0
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006fe:	e031      	b.n	8000764 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <__NVIC_SetPriority+0xd8>)
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	0019      	movs	r1, r3
 8000708:	230f      	movs	r3, #15
 800070a:	400b      	ands	r3, r1
 800070c:	3b08      	subs	r3, #8
 800070e:	089b      	lsrs	r3, r3, #2
 8000710:	3306      	adds	r3, #6
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	18d3      	adds	r3, r2, r3
 8000716:	3304      	adds	r3, #4
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	1dfa      	adds	r2, r7, #7
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	0011      	movs	r1, r2
 8000720:	2203      	movs	r2, #3
 8000722:	400a      	ands	r2, r1
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	21ff      	movs	r1, #255	; 0xff
 8000728:	4091      	lsls	r1, r2
 800072a:	000a      	movs	r2, r1
 800072c:	43d2      	mvns	r2, r2
 800072e:	401a      	ands	r2, r3
 8000730:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	019b      	lsls	r3, r3, #6
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	401a      	ands	r2, r3
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	0018      	movs	r0, r3
 8000740:	2303      	movs	r3, #3
 8000742:	4003      	ands	r3, r0
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <__NVIC_SetPriority+0xd8>)
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	001c      	movs	r4, r3
 8000750:	230f      	movs	r3, #15
 8000752:	4023      	ands	r3, r4
 8000754:	3b08      	subs	r3, #8
 8000756:	089b      	lsrs	r3, r3, #2
 8000758:	430a      	orrs	r2, r1
 800075a:	3306      	adds	r3, #6
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	18c3      	adds	r3, r0, r3
 8000760:	3304      	adds	r3, #4
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b003      	add	sp, #12
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	1e5a      	subs	r2, r3, #1
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	045b      	lsls	r3, r3, #17
 8000784:	429a      	cmp	r2, r3
 8000786:	d301      	bcc.n	800078c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000788:	2301      	movs	r3, #1
 800078a:	e010      	b.n	80007ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <SysTick_Config+0x44>)
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	3a01      	subs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000794:	2301      	movs	r3, #1
 8000796:	425b      	negs	r3, r3
 8000798:	2103      	movs	r1, #3
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff ff7c 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Config+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SysTick_Config+0x44>)
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	0018      	movs	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	e000e010 	.word	0xe000e010

080007bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	210f      	movs	r1, #15
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	1c02      	adds	r2, r0, #0
 80007cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ff5d 	bl	8000698 <__NVIC_SetPriority>
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b004      	add	sp, #16
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ffbf 	bl	8000774 <SysTick_Config>
 80007f6:	0003      	movs	r3, r0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	e14f      	b.n	8000ab0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	4091      	lsls	r1, r2
 800081a:	000a      	movs	r2, r1
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d100      	bne.n	8000828 <HAL_GPIO_Init+0x28>
 8000826:	e140      	b.n	8000aaa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d00b      	beq.n	8000848 <HAL_GPIO_Init+0x48>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b02      	cmp	r3, #2
 8000836:	d007      	beq.n	8000848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083c:	2b11      	cmp	r3, #17
 800083e:	d003      	beq.n	8000848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b12      	cmp	r3, #18
 8000846:	d130      	bne.n	80008aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2203      	movs	r2, #3
 8000854:	409a      	lsls	r2, r3
 8000856:	0013      	movs	r3, r2
 8000858:	43da      	mvns	r2, r3
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	409a      	lsls	r2, r3
 800086a:	0013      	movs	r3, r2
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800087e:	2201      	movs	r2, #1
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	409a      	lsls	r2, r3
 8000884:	0013      	movs	r3, r2
 8000886:	43da      	mvns	r2, r3
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	4013      	ands	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	091b      	lsrs	r3, r3, #4
 8000894:	2201      	movs	r2, #1
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
 800089c:	0013      	movs	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	409a      	lsls	r2, r3
 80008b8:	0013      	movs	r3, r2
 80008ba:	43da      	mvns	r2, r3
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4013      	ands	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	409a      	lsls	r2, r3
 80008cc:	0013      	movs	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d003      	beq.n	80008ea <HAL_GPIO_Init+0xea>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d123      	bne.n	8000932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	58d3      	ldr	r3, [r2, r3]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2207      	movs	r2, #7
 80008fc:	4013      	ands	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	220f      	movs	r2, #15
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	43da      	mvns	r2, r3
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	691a      	ldr	r2, [r3, #16]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	2107      	movs	r1, #7
 8000916:	400b      	ands	r3, r1
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	409a      	lsls	r2, r3
 800091c:	0013      	movs	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	6939      	ldr	r1, [r7, #16]
 8000930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	409a      	lsls	r2, r3
 8000940:	0013      	movs	r3, r2
 8000942:	43da      	mvns	r2, r3
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2203      	movs	r2, #3
 8000950:	401a      	ands	r2, r3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	409a      	lsls	r2, r3
 8000958:	0013      	movs	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	055b      	lsls	r3, r3, #21
 800096e:	4013      	ands	r3, r2
 8000970:	d100      	bne.n	8000974 <HAL_GPIO_Init+0x174>
 8000972:	e09a      	b.n	8000aaa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000974:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <HAL_GPIO_Init+0x2c8>)
 8000976:	699a      	ldr	r2, [r3, #24]
 8000978:	4b53      	ldr	r3, [pc, #332]	; (8000ac8 <HAL_GPIO_Init+0x2c8>)
 800097a:	2101      	movs	r1, #1
 800097c:	430a      	orrs	r2, r1
 800097e:	619a      	str	r2, [r3, #24]
 8000980:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <HAL_GPIO_Init+0x2c8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	2201      	movs	r2, #1
 8000986:	4013      	ands	r3, r2
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800098c:	4a4f      	ldr	r2, [pc, #316]	; (8000acc <HAL_GPIO_Init+0x2cc>)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	3302      	adds	r3, #2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	589b      	ldr	r3, [r3, r2]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	2203      	movs	r2, #3
 800099e:	4013      	ands	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	409a      	lsls	r2, r3
 80009a6:	0013      	movs	r3, r2
 80009a8:	43da      	mvns	r2, r3
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	2390      	movs	r3, #144	; 0x90
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d013      	beq.n	80009e2 <HAL_GPIO_Init+0x1e2>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d00d      	beq.n	80009de <HAL_GPIO_Init+0x1de>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a43      	ldr	r2, [pc, #268]	; (8000ad4 <HAL_GPIO_Init+0x2d4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d007      	beq.n	80009da <HAL_GPIO_Init+0x1da>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a42      	ldr	r2, [pc, #264]	; (8000ad8 <HAL_GPIO_Init+0x2d8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_GPIO_Init+0x1d6>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x1e4>
 80009d6:	2305      	movs	r3, #5
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x1e4>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x1e4>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x1e4>
 80009e2:	2300      	movs	r3, #0
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	2103      	movs	r1, #3
 80009e8:	400a      	ands	r2, r1
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009f4:	4935      	ldr	r1, [pc, #212]	; (8000acc <HAL_GPIO_Init+0x2cc>)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	025b      	lsls	r3, r3, #9
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	43da      	mvns	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	029b      	lsls	r3, r3, #10
 8000a44:	4013      	ands	r3, r2
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	035b      	lsls	r3, r3, #13
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	43da      	mvns	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	039b      	lsls	r3, r3, #14
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	40da      	lsrs	r2, r3
 8000ab8:	1e13      	subs	r3, r2, #0
 8000aba:	d000      	beq.n	8000abe <HAL_GPIO_Init+0x2be>
 8000abc:	e6a8      	b.n	8000810 <HAL_GPIO_Init+0x10>
  } 
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b006      	add	sp, #24
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	48000400 	.word	0x48000400
 8000ad4:	48000800 	.word	0x48000800
 8000ad8:	48000c00 	.word	0x48000c00
 8000adc:	40010400 	.word	0x40010400

08000ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	0008      	movs	r0, r1
 8000aea:	0011      	movs	r1, r2
 8000aec:	1cbb      	adds	r3, r7, #2
 8000aee:	1c02      	adds	r2, r0, #0
 8000af0:	801a      	strh	r2, [r3, #0]
 8000af2:	1c7b      	adds	r3, r7, #1
 8000af4:	1c0a      	adds	r2, r1, #0
 8000af6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af8:	1c7b      	adds	r3, r7, #1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b00:	1cbb      	adds	r3, r7, #2
 8000b02:	881a      	ldrh	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b08:	e003      	b.n	8000b12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b0a:	1cbb      	adds	r3, r7, #2
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	000a      	movs	r2, r1
 8000b24:	1cbb      	adds	r3, r7, #2
 8000b26:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b2e:	1cbb      	adds	r3, r7, #2
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	4013      	ands	r3, r2
 8000b36:	041a      	lsls	r2, r3, #16
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	1cb9      	adds	r1, r7, #2
 8000b3e:	8809      	ldrh	r1, [r1, #0]
 8000b40:	400b      	ands	r3, r1
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	619a      	str	r2, [r3, #24]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b004      	add	sp, #16
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e305      	b.n	800116e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2201      	movs	r2, #1
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d100      	bne.n	8000b6e <HAL_RCC_OscConfig+0x1e>
 8000b6c:	e08d      	b.n	8000c8a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b6e:	4bc5      	ldr	r3, [pc, #788]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	220c      	movs	r2, #12
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d00e      	beq.n	8000b98 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b7a:	4bc2      	ldr	r3, [pc, #776]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	220c      	movs	r2, #12
 8000b80:	4013      	ands	r3, r2
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d116      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x64>
 8000b86:	4bbf      	ldr	r3, [pc, #764]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	23c0      	movs	r3, #192	; 0xc0
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	401a      	ands	r2, r3
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	025b      	lsls	r3, r3, #9
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d10d      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b98:	4bba      	ldr	r3, [pc, #744]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d100      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x56>
 8000ba4:	e070      	b.n	8000c88 <HAL_RCC_OscConfig+0x138>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d000      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x60>
 8000bae:	e06b      	b.n	8000c88 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e2dc      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d107      	bne.n	8000bcc <HAL_RCC_OscConfig+0x7c>
 8000bbc:	4bb1      	ldr	r3, [pc, #708]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4bb0      	ldr	r3, [pc, #704]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e02f      	b.n	8000c2c <HAL_RCC_OscConfig+0xdc>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10c      	bne.n	8000bee <HAL_RCC_OscConfig+0x9e>
 8000bd4:	4bab      	ldr	r3, [pc, #684]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4baa      	ldr	r3, [pc, #680]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000bda:	49ab      	ldr	r1, [pc, #684]	; (8000e88 <HAL_RCC_OscConfig+0x338>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	4ba8      	ldr	r3, [pc, #672]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4ba7      	ldr	r3, [pc, #668]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000be6:	49a9      	ldr	r1, [pc, #676]	; (8000e8c <HAL_RCC_OscConfig+0x33c>)
 8000be8:	400a      	ands	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e01e      	b.n	8000c2c <HAL_RCC_OscConfig+0xdc>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b05      	cmp	r3, #5
 8000bf4:	d10e      	bne.n	8000c14 <HAL_RCC_OscConfig+0xc4>
 8000bf6:	4ba3      	ldr	r3, [pc, #652]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4ba2      	ldr	r3, [pc, #648]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	02c9      	lsls	r1, r1, #11
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	4b9f      	ldr	r3, [pc, #636]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b9e      	ldr	r3, [pc, #632]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0249      	lsls	r1, r1, #9
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e00b      	b.n	8000c2c <HAL_RCC_OscConfig+0xdc>
 8000c14:	4b9b      	ldr	r3, [pc, #620]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b9a      	ldr	r3, [pc, #616]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c1a:	499b      	ldr	r1, [pc, #620]	; (8000e88 <HAL_RCC_OscConfig+0x338>)
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	4b98      	ldr	r3, [pc, #608]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b97      	ldr	r3, [pc, #604]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c26:	4999      	ldr	r1, [pc, #612]	; (8000e8c <HAL_RCC_OscConfig+0x33c>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d014      	beq.n	8000c5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fd24 	bl	8000680 <HAL_GetTick>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3c:	e008      	b.n	8000c50 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3e:	f7ff fd1f 	bl	8000680 <HAL_GetTick>
 8000c42:	0002      	movs	r2, r0
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b64      	cmp	r3, #100	; 0x64
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e28e      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c50:	4b8c      	ldr	r3, [pc, #560]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	029b      	lsls	r3, r3, #10
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d0f0      	beq.n	8000c3e <HAL_RCC_OscConfig+0xee>
 8000c5c:	e015      	b.n	8000c8a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fd0f 	bl	8000680 <HAL_GetTick>
 8000c62:	0003      	movs	r3, r0
 8000c64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fd0a 	bl	8000680 <HAL_GetTick>
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e279      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b82      	ldr	r3, [pc, #520]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	029b      	lsls	r3, r3, #10
 8000c82:	4013      	ands	r3, r2
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x118>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2202      	movs	r2, #2
 8000c90:	4013      	ands	r3, r2
 8000c92:	d100      	bne.n	8000c96 <HAL_RCC_OscConfig+0x146>
 8000c94:	e06c      	b.n	8000d70 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c96:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d00e      	beq.n	8000cbe <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ca0:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d11f      	bne.n	8000cec <HAL_RCC_OscConfig+0x19c>
 8000cac:	4b75      	ldr	r3, [pc, #468]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	23c0      	movs	r3, #192	; 0xc0
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d116      	bne.n	8000cec <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d005      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x184>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d001      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e24c      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd4:	4b6b      	ldr	r3, [pc, #428]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	22f8      	movs	r2, #248	; 0xf8
 8000cda:	4393      	bics	r3, r2
 8000cdc:	0019      	movs	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	00da      	lsls	r2, r3, #3
 8000ce4:	4b67      	ldr	r3, [pc, #412]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	e041      	b.n	8000d70 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d024      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf4:	4b63      	ldr	r3, [pc, #396]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fcbe 	bl	8000680 <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fcb9 	bl	8000680 <HAL_GetTick>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e228      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4b59      	ldr	r3, [pc, #356]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2202      	movs	r2, #2
 8000d22:	4013      	ands	r3, r2
 8000d24:	d0f1      	beq.n	8000d0a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d26:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	22f8      	movs	r2, #248	; 0xf8
 8000d2c:	4393      	bics	r3, r2
 8000d2e:	0019      	movs	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	00da      	lsls	r2, r3, #3
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e018      	b.n	8000d70 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	438a      	bics	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fc99 	bl	8000680 <HAL_GetTick>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d54:	f7ff fc94 	bl	8000680 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e203      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d1f1      	bne.n	8000d54 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2208      	movs	r2, #8
 8000d76:	4013      	ands	r3, r2
 8000d78:	d036      	beq.n	8000de8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d019      	beq.n	8000db6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d82:	4b40      	ldr	r3, [pc, #256]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fc77 	bl	8000680 <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d98:	f7ff fc72 	bl	8000680 <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e1e1      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	2202      	movs	r2, #2
 8000db0:	4013      	ands	r3, r2
 8000db2:	d0f1      	beq.n	8000d98 <HAL_RCC_OscConfig+0x248>
 8000db4:	e018      	b.n	8000de8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	438a      	bics	r2, r1
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fc5d 	bl	8000680 <HAL_GetTick>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fc58 	bl	8000680 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1c7      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d1f1      	bne.n	8000dcc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2204      	movs	r2, #4
 8000dee:	4013      	ands	r3, r2
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x2a4>
 8000df2:	e0b5      	b.n	8000f60 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000df4:	201f      	movs	r0, #31
 8000df6:	183b      	adds	r3, r7, r0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	055b      	lsls	r3, r3, #21
 8000e04:	4013      	ands	r3, r2
 8000e06:	d110      	bne.n	8000e2a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000e0a:	69da      	ldr	r2, [r3, #28]
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	0549      	lsls	r1, r1, #21
 8000e12:	430a      	orrs	r2, r1
 8000e14:	61da      	str	r2, [r3, #28]
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	055b      	lsls	r3, r3, #21
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e24:	183b      	adds	r3, r7, r0
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_RCC_OscConfig+0x340>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4013      	ands	r3, r2
 8000e34:	d11a      	bne.n	8000e6c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_RCC_OscConfig+0x340>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_RCC_OscConfig+0x340>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	0049      	lsls	r1, r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e44:	f7ff fc1c 	bl	8000680 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e4e:	f7ff fc17 	bl	8000680 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e186      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_RCC_OscConfig+0x340>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d10f      	bne.n	8000e94 <HAL_RCC_OscConfig+0x344>
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000e76:	6a1a      	ldr	r2, [r3, #32]
 8000e78:	4b02      	ldr	r3, [pc, #8]	; (8000e84 <HAL_RCC_OscConfig+0x334>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	621a      	str	r2, [r3, #32]
 8000e80:	e036      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3a0>
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40021000 	.word	0x40021000
 8000e88:	fffeffff 	.word	0xfffeffff
 8000e8c:	fffbffff 	.word	0xfffbffff
 8000e90:	40007000 	.word	0x40007000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x366>
 8000e9c:	4bb6      	ldr	r3, [pc, #728]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000e9e:	6a1a      	ldr	r2, [r3, #32]
 8000ea0:	4bb5      	ldr	r3, [pc, #724]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	621a      	str	r2, [r3, #32]
 8000ea8:	4bb3      	ldr	r3, [pc, #716]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	4bb2      	ldr	r3, [pc, #712]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000eae:	2104      	movs	r1, #4
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	621a      	str	r2, [r3, #32]
 8000eb4:	e01c      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3a0>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x388>
 8000ebe:	4bae      	ldr	r3, [pc, #696]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	4bad      	ldr	r3, [pc, #692]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	621a      	str	r2, [r3, #32]
 8000eca:	4bab      	ldr	r3, [pc, #684]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	4baa      	ldr	r3, [pc, #680]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	e00b      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3a0>
 8000ed8:	4ba7      	ldr	r3, [pc, #668]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000eda:	6a1a      	ldr	r2, [r3, #32]
 8000edc:	4ba6      	ldr	r3, [pc, #664]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	621a      	str	r2, [r3, #32]
 8000ee4:	4ba4      	ldr	r3, [pc, #656]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	4ba3      	ldr	r3, [pc, #652]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000eea:	2104      	movs	r1, #4
 8000eec:	438a      	bics	r2, r1
 8000eee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d014      	beq.n	8000f22 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fbc2 	bl	8000680 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f00:	e009      	b.n	8000f16 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fbbd 	bl	8000680 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	4a9b      	ldr	r2, [pc, #620]	; (800117c <HAL_RCC_OscConfig+0x62c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e12b      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f16:	4b98      	ldr	r3, [pc, #608]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x3b2>
 8000f20:	e013      	b.n	8000f4a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fbad 	bl	8000680 <HAL_GetTick>
 8000f26:	0003      	movs	r3, r0
 8000f28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2a:	e009      	b.n	8000f40 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fba8 	bl	8000680 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	4a91      	ldr	r2, [pc, #580]	; (800117c <HAL_RCC_OscConfig+0x62c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e116      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	4b8d      	ldr	r3, [pc, #564]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	2202      	movs	r2, #2
 8000f46:	4013      	ands	r3, r2
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f4a:	231f      	movs	r3, #31
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f54:	4b88      	ldr	r3, [pc, #544]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f56:	69da      	ldr	r2, [r3, #28]
 8000f58:	4b87      	ldr	r3, [pc, #540]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f5a:	4989      	ldr	r1, [pc, #548]	; (8001180 <HAL_RCC_OscConfig+0x630>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2210      	movs	r2, #16
 8000f66:	4013      	ands	r3, r2
 8000f68:	d063      	beq.n	8001032 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d12a      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f72:	4b81      	ldr	r3, [pc, #516]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f76:	4b80      	ldr	r3, [pc, #512]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f78:	2104      	movs	r1, #4
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f7e:	4b7e      	ldr	r3, [pc, #504]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f82:	4b7d      	ldr	r3, [pc, #500]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb79 	bl	8000680 <HAL_GetTick>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f94:	f7ff fb74 	bl	8000680 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e0e3      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fa6:	4b74      	ldr	r3, [pc, #464]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	2202      	movs	r2, #2
 8000fac:	4013      	ands	r3, r2
 8000fae:	d0f1      	beq.n	8000f94 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fb0:	4b71      	ldr	r3, [pc, #452]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	22f8      	movs	r2, #248	; 0xf8
 8000fb6:	4393      	bics	r3, r2
 8000fb8:	0019      	movs	r1, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	00da      	lsls	r2, r3, #3
 8000fc0:	4b6d      	ldr	r3, [pc, #436]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc6:	e034      	b.n	8001032 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	3305      	adds	r3, #5
 8000fce:	d111      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fd0:	4b69      	ldr	r3, [pc, #420]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd4:	4b68      	ldr	r3, [pc, #416]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	438a      	bics	r2, r1
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fdc:	4b66      	ldr	r3, [pc, #408]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe0:	22f8      	movs	r2, #248	; 0xf8
 8000fe2:	4393      	bics	r3, r2
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	00da      	lsls	r2, r3, #3
 8000fec:	4b62      	ldr	r3, [pc, #392]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff2:	e01e      	b.n	8001032 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ff4:	4b60      	ldr	r3, [pc, #384]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff8:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001000:	4b5d      	ldr	r3, [pc, #372]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001004:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001006:	2101      	movs	r1, #1
 8001008:	438a      	bics	r2, r1
 800100a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fb38 	bl	8000680 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001016:	f7ff fb33 	bl	8000680 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0a2      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001028:	4b53      	ldr	r3, [pc, #332]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 800102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102c:	2202      	movs	r2, #2
 800102e:	4013      	ands	r3, r2
 8001030:	d1f1      	bne.n	8001016 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d100      	bne.n	800103c <HAL_RCC_OscConfig+0x4ec>
 800103a:	e097      	b.n	800116c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	220c      	movs	r2, #12
 8001042:	4013      	ands	r3, r2
 8001044:	2b08      	cmp	r3, #8
 8001046:	d100      	bne.n	800104a <HAL_RCC_OscConfig+0x4fa>
 8001048:	e06b      	b.n	8001122 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d14c      	bne.n	80010ec <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b48      	ldr	r3, [pc, #288]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001058:	494a      	ldr	r1, [pc, #296]	; (8001184 <HAL_RCC_OscConfig+0x634>)
 800105a:	400a      	ands	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff fb0f 	bl	8000680 <HAL_GetTick>
 8001062:	0003      	movs	r3, r0
 8001064:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fb0a 	bl	8000680 <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e079      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	049b      	lsls	r3, r3, #18
 8001082:	4013      	ands	r3, r2
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	220f      	movs	r2, #15
 800108c:	4393      	bics	r3, r2
 800108e:	0019      	movs	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001094:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001096:	430a      	orrs	r2, r1
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a3a      	ldr	r2, [pc, #232]	; (8001188 <HAL_RCC_OscConfig+0x638>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	0019      	movs	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	431a      	orrs	r2, r3
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 80010b0:	430a      	orrs	r2, r1
 80010b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0449      	lsls	r1, r1, #17
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fadd 	bl	8000680 <HAL_GetTick>
 80010c6:	0003      	movs	r3, r0
 80010c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff fad8 	bl	8000680 <HAL_GetTick>
 80010d0:	0002      	movs	r2, r0
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e047      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	049b      	lsls	r3, r3, #18
 80010e6:	4013      	ands	r3, r2
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0x57c>
 80010ea:	e03f      	b.n	800116c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 80010f2:	4924      	ldr	r1, [pc, #144]	; (8001184 <HAL_RCC_OscConfig+0x634>)
 80010f4:	400a      	ands	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fac2 	bl	8000680 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001102:	f7ff fabd 	bl	8000680 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e02c      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	049b      	lsls	r3, r3, #18
 800111c:	4013      	ands	r3, r2
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x5b2>
 8001120:	e024      	b.n	800116c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e01f      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_RCC_OscConfig+0x628>)
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	23c0      	movs	r3, #192	; 0xc0
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	401a      	ands	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	429a      	cmp	r2, r3
 8001148:	d10e      	bne.n	8001168 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	220f      	movs	r2, #15
 800114e:	401a      	ands	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001154:	429a      	cmp	r2, r3
 8001156:	d107      	bne.n	8001168 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	23f0      	movs	r3, #240	; 0xf0
 800115c:	039b      	lsls	r3, r3, #14
 800115e:	401a      	ands	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b008      	add	sp, #32
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	40021000 	.word	0x40021000
 800117c:	00001388 	.word	0x00001388
 8001180:	efffffff 	.word	0xefffffff
 8001184:	feffffff 	.word	0xfeffffff
 8001188:	ffc27fff 	.word	0xffc27fff

0800118c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	464c      	mov	r4, r9
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0b5      	b.n	800130e <HAL_RCC_ClockConfig+0x182>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2201      	movs	r2, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d911      	bls.n	80011d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4393      	bics	r3, r2
 80011b8:	0019      	movs	r1, r3
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2201      	movs	r2, #1
 80011c8:	4013      	ands	r3, r2
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e09c      	b.n	800130e <HAL_RCC_ClockConfig+0x182>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2202      	movs	r2, #2
 80011da:	4013      	ands	r3, r2
 80011dc:	d015      	beq.n	800120a <HAL_RCC_ClockConfig+0x7e>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2204      	movs	r2, #4
 80011e4:	4013      	ands	r3, r2
 80011e6:	d006      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x6a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011e8:	4b4c      	ldr	r3, [pc, #304]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 80011ee:	21e0      	movs	r1, #224	; 0xe0
 80011f0:	00c9      	lsls	r1, r1, #3
 80011f2:	430a      	orrs	r2, r1
 80011f4:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	22f0      	movs	r2, #240	; 0xf0
 80011fc:	4393      	bics	r3, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	4b45      	ldr	r3, [pc, #276]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 8001206:	430a      	orrs	r2, r1
 8001208:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	d040      	beq.n	8001296 <HAL_RCC_ClockConfig+0x10a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121c:	4b3f      	ldr	r3, [pc, #252]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	d114      	bne.n	8001252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e070      	b.n	800130e <HAL_RCC_ClockConfig+0x182>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d107      	bne.n	8001244 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	049b      	lsls	r3, r3, #18
 800123c:	4013      	ands	r3, r2
 800123e:	d108      	bne.n	8001252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e064      	b.n	800130e <HAL_RCC_ClockConfig+0x182>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e05d      	b.n	800130e <HAL_RCC_ClockConfig+0x182>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001266:	f7ff fa0b 	bl	8000680 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	e009      	b.n	8001284 <HAL_RCC_ClockConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001270:	f7ff fa06 	bl	8000680 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_RCC_ClockConfig+0x194>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e044      	b.n	800130e <HAL_RCC_ClockConfig+0x182>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	220c      	movs	r2, #12
 800128a:	401a      	ands	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	429a      	cmp	r2, r3
 8001294:	d1ec      	bne.n	8001270 <HAL_RCC_ClockConfig+0xe4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d211      	bcs.n	80012c8 <HAL_RCC_ClockConfig+0x13c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4393      	bics	r3, r2
 80012ac:	0019      	movs	r1, r3
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_RCC_ClockConfig+0x18c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x13c>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e022      	b.n	800130e <HAL_RCC_ClockConfig+0x182>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2204      	movs	r2, #4
 80012ce:	4013      	ands	r3, r2
 80012d0:	d009      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x15a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_RCC_ClockConfig+0x198>)
 80012d8:	4013      	ands	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012e6:	f000 f823 	bl	8001330 <HAL_RCC_GetSysClockFreq>
 80012ea:	0001      	movs	r1, r0
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_ClockConfig+0x190>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	220f      	movs	r2, #15
 80012f4:	4013      	ands	r3, r2
 80012f6:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_RCC_ClockConfig+0x19c>)
 80012f8:	58a2      	ldr	r2, [r4, r2]
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	000a      	movs	r2, r1
 80012fe:	40da      	lsrs	r2, r3
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_RCC_ClockConfig+0x1a0>)
 8001302:	58e3      	ldr	r3, [r4, r3]
 8001304:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff f96c 	bl	80005e4 <HAL_InitTick>
  
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b005      	add	sp, #20
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	40022000 	.word	0x40022000
 800131c:	40021000 	.word	0x40021000
 8001320:	00001388 	.word	0x00001388
 8001324:	fffff8ff 	.word	0xfffff8ff
 8001328:	00000018 	.word	0x00000018
 800132c:	00000008 	.word	0x00000008

08001330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0
 8001336:	4649      	mov	r1, r9
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001338:	2314      	movs	r3, #20
 800133a:	18f8      	adds	r0, r7, r3
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800133e:	58ca      	ldr	r2, [r1, r3]
 8001340:	0003      	movs	r3, r0
 8001342:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001344:	c331      	stmia	r3!, {r0, r4, r5}
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800134a:	1d38      	adds	r0, r7, #4
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800134e:	58ca      	ldr	r2, [r1, r3]
 8001350:	0003      	movs	r3, r0
 8001352:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001354:	c313      	stmia	r3!, {r0, r1, r4}
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
 8001362:	2300      	movs	r3, #0
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001376:	220c      	movs	r2, #12
 8001378:	4013      	ands	r3, r2
 800137a:	2b04      	cmp	r3, #4
 800137c:	d002      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x54>
 800137e:	2b08      	cmp	r3, #8
 8001380:	d003      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x5a>
 8001382:	e02f      	b.n	80013e4 <HAL_RCC_GetSysClockFreq+0xb4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001388:	e02f      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	220f      	movs	r2, #15
 8001390:	4013      	ands	r3, r2
 8001392:	2214      	movs	r2, #20
 8001394:	18ba      	adds	r2, r7, r2
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_RCC_GetSysClockFreq+0xcc>)
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	220f      	movs	r2, #15
 80013a0:	4013      	ands	r3, r2
 80013a2:	1d3a      	adds	r2, r7, #4
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013aa:	23c0      	movs	r3, #192	; 0xc0
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	401a      	ands	r2, r3
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	025b      	lsls	r3, r3, #9
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d109      	bne.n	80013cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <HAL_RCC_GetSysClockFreq+0xd0>)
 80013bc:	f7fe feb8 	bl	8000130 <__udivsi3>
 80013c0:	0003      	movs	r3, r0
 80013c2:	001a      	movs	r2, r3
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	4353      	muls	r3, r2
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
 80013ca:	e008      	b.n	80013de <HAL_RCC_GetSysClockFreq+0xae>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <HAL_RCC_GetSysClockFreq+0xd0>)
 80013d0:	f7fe feae 	bl	8000130 <__udivsi3>
 80013d4:	0003      	movs	r3, r0
 80013d6:	001a      	movs	r2, r3
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	4353      	muls	r3, r2
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80013de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013e2:	e002      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0xba>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RCC_GetSysClockFreq+0xd0>)
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013e8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80013ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b00e      	add	sp, #56	; 0x38
 80013f2:	bdb0      	pop	{r4, r5, r7, pc}
 80013f4:	00000000 	.word	0x00000000
 80013f8:	00000004 	.word	0x00000004
 80013fc:	40021000 	.word	0x40021000
 8001400:	007a1200 	.word	0x007a1200

08001404 <memset>:
 8001404:	0003      	movs	r3, r0
 8001406:	1882      	adds	r2, r0, r2
 8001408:	4293      	cmp	r3, r2
 800140a:	d100      	bne.n	800140e <memset+0xa>
 800140c:	4770      	bx	lr
 800140e:	7019      	strb	r1, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	e7f9      	b.n	8001408 <memset+0x4>

08001414 <_init>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141a:	bc08      	pop	{r3}
 800141c:	469e      	mov	lr, r3
 800141e:	4770      	bx	lr

08001420 <_fini>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr
