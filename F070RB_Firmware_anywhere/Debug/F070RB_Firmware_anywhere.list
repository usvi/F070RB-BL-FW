
F070RB_Firmware_anywhere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  20000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .got          00000034  200000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00001b6c  080000f4  080000f4  000100f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  08001c60  08001c60  00011c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08001c90  08001c90  0002010c  2**0
                  CONTENTS
  5 .ARM          00000000  08001c90  08001c90  0002010c  2**0
                  CONTENTS
  6 .preinit_array 00000000  08001c90  08001c90  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08001c90  08001c90  00011c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08001c94  08001c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  200000f4  08001c98  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got.plt      0000000c  20000100  08001ca4  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000007c  2000010c  08001cb0  0002010c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000188  08001cb0  00020188  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007d81  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001543  00000000  00000000  00027eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008c8  00000000  00000000  000293f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f6c0  00000000  00000000  00029cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bdb  00000000  00000000  00039380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006028d  00000000  00000000  00042f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000a31e8  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 00000808  00000000  00000000  000a3240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001ed4  00000000  00000000  000a3a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000f4 <__do_global_dtors_aux>:
 80000f4:	b510      	push	{r4, lr}
 80000f6:	4c06      	ldr	r4, [pc, #24]	; (8000110 <__do_global_dtors_aux+0x1c>)
 80000f8:	7823      	ldrb	r3, [r4, #0]
 80000fa:	2b00      	cmp	r3, #0
 80000fc:	d107      	bne.n	800010e <__do_global_dtors_aux+0x1a>
 80000fe:	4b05      	ldr	r3, [pc, #20]	; (8000114 <__do_global_dtors_aux+0x20>)
 8000100:	2b00      	cmp	r3, #0
 8000102:	d002      	beq.n	800010a <__do_global_dtors_aux+0x16>
 8000104:	4804      	ldr	r0, [pc, #16]	; (8000118 <__do_global_dtors_aux+0x24>)
 8000106:	e000      	b.n	800010a <__do_global_dtors_aux+0x16>
 8000108:	bf00      	nop
 800010a:	2301      	movs	r3, #1
 800010c:	7023      	strb	r3, [r4, #0]
 800010e:	bd10      	pop	{r4, pc}
 8000110:	2000010c 	.word	0x2000010c
 8000114:	00000000 	.word	0x00000000
 8000118:	08001c48 	.word	0x08001c48

0800011c <frame_dummy>:
 800011c:	4b04      	ldr	r3, [pc, #16]	; (8000130 <frame_dummy+0x14>)
 800011e:	b510      	push	{r4, lr}
 8000120:	2b00      	cmp	r3, #0
 8000122:	d003      	beq.n	800012c <frame_dummy+0x10>
 8000124:	4903      	ldr	r1, [pc, #12]	; (8000134 <frame_dummy+0x18>)
 8000126:	4804      	ldr	r0, [pc, #16]	; (8000138 <frame_dummy+0x1c>)
 8000128:	e000      	b.n	800012c <frame_dummy+0x10>
 800012a:	bf00      	nop
 800012c:	bd10      	pop	{r4, pc}
 800012e:	46c0      	nop			; (mov r8, r8)
 8000130:	00000000 	.word	0x00000000
 8000134:	20000110 	.word	0x20000110
 8000138:	08001c48 	.word	0x08001c48

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f806 	bl	8000250 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__aeabi_idiv0>:
 8000250:	4770      	bx	lr
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	af00      	add	r7, sp, #0
 8000258:	464c      	mov	r4, r9
  HAL_Init();
 800025a:	f000 fabf 	bl	80007dc <HAL_Init>
  SystemClock_Config();
 800025e:	f000 f80f 	bl	8000280 <SystemClock_Config>
  MX_GPIO_Init();
 8000262:	f000 f8a7 	bl	80003b4 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000266:	f000 f857 	bl	8000318 <MX_TIM16_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <main+0x28>)
 800026c:	58e3      	ldr	r3, [r4, r3]
 800026e:	0018      	movs	r0, r3
 8000270:	f001 fada 	bl	8001828 <HAL_TIM_Base_Start_IT>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000274:	b662      	cpsie	i
}
 8000276:	46c0      	nop			; (mov r8, r8)
  __enable_irq();

  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x24>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	00000030 	.word	0x00000030

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b091      	sub	sp, #68	; 0x44
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	2410      	movs	r4, #16
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2330      	movs	r3, #48	; 0x30
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f001 fcd1 	bl	8001c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	003b      	movs	r3, r7
 8000298:	0018      	movs	r0, r3
 800029a:	2310      	movs	r3, #16
 800029c:	001a      	movs	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	f001 fcca 	bl	8001c38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2202      	movs	r2, #2
 80002aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2210      	movs	r2, #16
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2202      	movs	r2, #2
 80002bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0212      	lsls	r2, r2, #8
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0352      	lsls	r2, r2, #13
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fda6 	bl	8000e28 <HAL_RCC_OscConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002e0:	f000 f8d2 	bl	8000488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	003b      	movs	r3, r7
 80002e6:	2207      	movs	r2, #7
 80002e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2202      	movs	r2, #2
 80002ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fc:	003b      	movs	r3, r7
 80002fe:	2101      	movs	r1, #1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 f8af 	bl	8001464 <HAL_RCC_ClockConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800030a:	f000 f8bd 	bl	8000488 <Error_Handler>
  }
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b011      	add	sp, #68	; 0x44
 8000314:	bd90      	pop	{r4, r7, pc}
	...

08000318 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000318:	b5b0      	push	{r4, r5, r7, lr}
 800031a:	af00      	add	r7, sp, #0
 800031c:	464c      	mov	r4, r9
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_TIM16_Init+0x64>)
 8000320:	58e3      	ldr	r3, [r4, r3]
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <MX_TIM16_Init+0x68>)
 8000324:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000 - 1;
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_TIM16_Init+0x64>)
 8000328:	58e3      	ldr	r3, [r4, r3]
 800032a:	4a16      	ldr	r2, [pc, #88]	; (8000384 <MX_TIM16_Init+0x6c>)
 800032c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <MX_TIM16_Init+0x64>)
 8000330:	58e3      	ldr	r3, [r4, r3]
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_TIM16_Init+0x64>)
 8000338:	58e3      	ldr	r3, [r4, r3]
 800033a:	22fa      	movs	r2, #250	; 0xfa
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_TIM16_Init+0x64>)
 8000342:	58e3      	ldr	r3, [r4, r3]
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_TIM16_Init+0x64>)
 800034a:	58e3      	ldr	r3, [r4, r3]
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000350:	4b0a      	ldr	r3, [pc, #40]	; (800037c <MX_TIM16_Init+0x64>)
 8000352:	58e3      	ldr	r3, [r4, r3]
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]

  HAL_TIM_Base_DeInit(&htim16);
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_TIM16_Init+0x64>)
 800035a:	58e3      	ldr	r3, [r4, r3]
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fa0d 	bl	800177c <HAL_TIM_Base_DeInit>

  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_TIM16_Init+0x64>)
 8000364:	58e3      	ldr	r3, [r4, r3]
 8000366:	0018      	movs	r0, r3
 8000368:	f001 f9b8 	bl	80016dc <HAL_TIM_Base_Init>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM16_Init+0x5c>
  {
    Error_Handler();
 8000370:	f000 f88a 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	bdb0      	pop	{r4, r5, r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	00000030 	.word	0x00000030
 8000380:	40014400 	.word	0x40014400
 8000384:	0000bb7f 	.word	0x0000bb7f

08000388 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	464b      	mov	r3, r9
  if (htim == &htim16)
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	4906      	ldr	r1, [pc, #24]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000396:	585b      	ldr	r3, [r3, r1]
 8000398:	429a      	cmp	r2, r3
 800039a:	d105      	bne.n	80003a8 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800039c:	2390      	movs	r3, #144	; 0x90
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	2120      	movs	r1, #32
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 fd25 	bl	8000df2 <HAL_GPIO_TogglePin>
  }

}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	00000030 	.word	0x00000030

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b089      	sub	sp, #36	; 0x24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	240c      	movs	r4, #12
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	0018      	movs	r0, r3
 80003c0:	2314      	movs	r3, #20
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f001 fc37 	bl	8001c38 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ca:	4b2c      	ldr	r3, [pc, #176]	; (800047c <MX_GPIO_Init+0xc8>)
 80003cc:	695a      	ldr	r2, [r3, #20]
 80003ce:	4b2b      	ldr	r3, [pc, #172]	; (800047c <MX_GPIO_Init+0xc8>)
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0309      	lsls	r1, r1, #12
 80003d4:	430a      	orrs	r2, r1
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	4b28      	ldr	r3, [pc, #160]	; (800047c <MX_GPIO_Init+0xc8>)
 80003da:	695a      	ldr	r2, [r3, #20]
 80003dc:	2380      	movs	r3, #128	; 0x80
 80003de:	031b      	lsls	r3, r3, #12
 80003e0:	4013      	ands	r3, r2
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <MX_GPIO_Init+0xc8>)
 80003e8:	695a      	ldr	r2, [r3, #20]
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <MX_GPIO_Init+0xc8>)
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	03c9      	lsls	r1, r1, #15
 80003f0:	430a      	orrs	r2, r1
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <MX_GPIO_Init+0xc8>)
 80003f6:	695a      	ldr	r2, [r3, #20]
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	03db      	lsls	r3, r3, #15
 80003fc:	4013      	ands	r3, r2
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_GPIO_Init+0xc8>)
 8000404:	695a      	ldr	r2, [r3, #20]
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_GPIO_Init+0xc8>)
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	0289      	lsls	r1, r1, #10
 800040c:	430a      	orrs	r2, r1
 800040e:	615a      	str	r2, [r3, #20]
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_GPIO_Init+0xc8>)
 8000412:	695a      	ldr	r2, [r3, #20]
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	029b      	lsls	r3, r3, #10
 8000418:	4013      	ands	r3, r2
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800041e:	2390      	movs	r3, #144	; 0x90
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2200      	movs	r2, #0
 8000424:	2120      	movs	r1, #32
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fcc6 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800042c:	193b      	adds	r3, r7, r4
 800042e:	2280      	movs	r2, #128	; 0x80
 8000430:	0192      	lsls	r2, r2, #6
 8000432:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <MX_GPIO_Init+0xcc>)
 8000438:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000440:	193b      	adds	r3, r7, r4
 8000442:	4a10      	ldr	r2, [pc, #64]	; (8000484 <MX_GPIO_Init+0xd0>)
 8000444:	0019      	movs	r1, r3
 8000446:	0010      	movs	r0, r2
 8000448:	f000 fb46 	bl	8000ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800044c:	0021      	movs	r1, r4
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2220      	movs	r2, #32
 8000452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2201      	movs	r2, #1
 8000458:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000466:	187a      	adds	r2, r7, r1
 8000468:	2390      	movs	r3, #144	; 0x90
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fb32 	bl	8000ad8 <HAL_GPIO_Init>

}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b009      	add	sp, #36	; 0x24
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	10210000 	.word	0x10210000
 8000484:	48000800 	.word	0x48000800

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x44>)
 800049c:	699a      	ldr	r2, [r3, #24]
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <HAL_MspInit+0x44>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	430a      	orrs	r2, r1
 80004a4:	619a      	str	r2, [r3, #24]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x44>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	2201      	movs	r2, #1
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_MspInit+0x44>)
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_MspInit+0x44>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0549      	lsls	r1, r1, #21
 80004bc:	430a      	orrs	r2, r1
 80004be:	61da      	str	r2, [r3, #28]
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_MspInit+0x44>)
 80004c2:	69da      	ldr	r2, [r3, #28]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	055b      	lsls	r3, r3, #21
 80004c8:	4013      	ands	r3, r2
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_TIM_Base_MspInit+0x48>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d115      	bne.n	800051a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_TIM_Base_MspInit+0x4c>)
 80004f0:	699a      	ldr	r2, [r3, #24]
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <HAL_TIM_Base_MspInit+0x4c>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0289      	lsls	r1, r1, #10
 80004f8:	430a      	orrs	r2, r1
 80004fa:	619a      	str	r2, [r3, #24]
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_TIM_Base_MspInit+0x4c>)
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	029b      	lsls	r3, r3, #10
 8000504:	4013      	ands	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2015      	movs	r0, #21
 8000510:	f000 faa0 	bl	8000a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000514:	2015      	movs	r0, #21
 8000516:	f000 fab2 	bl	8000a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40014400 	.word	0x40014400
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_TIM_Base_MspDeInit+0x2c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d108      	bne.n	8000550 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM16_MspDeInit 0 */

  /* USER CODE END TIM16_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM16_CLK_DISABLE();
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_TIM_Base_MspDeInit+0x30>)
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_TIM_Base_MspDeInit+0x30>)
 8000544:	4906      	ldr	r1, [pc, #24]	; (8000560 <HAL_TIM_Base_MspDeInit+0x34>)
 8000546:	400a      	ands	r2, r1
 8000548:	619a      	str	r2, [r3, #24]

    /* TIM16 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM16_IRQn);
 800054a:	2015      	movs	r0, #21
 800054c:	f000 faa7 	bl	8000a9e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM16_MspDeInit 1 */

  /* USER CODE END TIM16_MspDeInit 1 */
  }

}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40014400 	.word	0x40014400
 800055c:	40021000 	.word	0x40021000
 8000560:	fffdffff 	.word	0xfffdffff

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f974 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
 8000598:	464b      	mov	r3, r9
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <TIM16_IRQHandler+0x18>)
 800059c:	589b      	ldr	r3, [r3, r2]
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 f98e 	bl	80018c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	00000030 	.word	0x00000030

080005b0 <SystemInit>:
  * @{
  */


void SystemInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	464b      	mov	r3, r9
  uint32_t* pu32FwFlashPointer = (uint32_t*)gu32FirmwareAbsPosition;
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <SystemInit+0x94>)
 80005ba:	589a      	ldr	r2, [r3, r2]
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	60fa      	str	r2, [r7, #12]
  uint32_t* pu32FwRamPointer = (uint32_t*)gu32RamVectorTableBegin;
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <SystemInit+0x98>)
 80005c2:	589a      	ldr	r2, [r3, r2]
 80005c4:	6812      	ldr	r2, [r2, #0]
 80005c6:	60ba      	str	r2, [r7, #8]
  uint32_t u32TableValue = 0;
 80005c8:	2200      	movs	r2, #0
 80005ca:	607a      	str	r2, [r7, #4]

  // Vector table goes always to ram now from flash

  // First is stack address, copy verbatim
  (*(pu32FwRamPointer++)) = (*(pu32FwFlashPointer++));
 80005cc:	68f9      	ldr	r1, [r7, #12]
 80005ce:	1d0a      	adds	r2, r1, #4
 80005d0:	60fa      	str	r2, [r7, #12]
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	1d10      	adds	r0, r2, #4
 80005d6:	60b8      	str	r0, [r7, #8]
 80005d8:	6809      	ldr	r1, [r1, #0]
 80005da:	6011      	str	r1, [r2, #0]

  while (pu32FwRamPointer < ((uint32_t*)gu32RamVectorTableEnd))
 80005dc:	e015      	b.n	800060a <SystemInit+0x5a>
  {
    // Get the value first
    u32TableValue = (*(pu32FwFlashPointer++));
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	1d11      	adds	r1, r2, #4
 80005e2:	60f9      	str	r1, [r7, #12]
 80005e4:	6812      	ldr	r2, [r2, #0]
 80005e6:	607a      	str	r2, [r7, #4]

    // Only patch values pointing to flash, just in case
    if (u32TableValue >= gu32FlashBegin)
 80005e8:	4a18      	ldr	r2, [pc, #96]	; (800064c <SystemInit+0x9c>)
 80005ea:	589a      	ldr	r2, [r3, r2]
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4291      	cmp	r1, r2
 80005f2:	d305      	bcc.n	8000600 <SystemInit+0x50>
    {
      u32TableValue += gu32FirmwareOffset;
 80005f4:	4a16      	ldr	r2, [pc, #88]	; (8000650 <SystemInit+0xa0>)
 80005f6:	589a      	ldr	r2, [r3, r2]
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	188a      	adds	r2, r1, r2
 80005fe:	607a      	str	r2, [r7, #4]
    }

    // And finally, put the value to ram
    (*(pu32FwRamPointer++)) = u32TableValue;
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	1d11      	adds	r1, r2, #4
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	6011      	str	r1, [r2, #0]
  while (pu32FwRamPointer < ((uint32_t*)gu32RamVectorTableEnd))
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <SystemInit+0xa4>)
 800060c:	589a      	ldr	r2, [r3, r2]
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	0011      	movs	r1, r2
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	428a      	cmp	r2, r1
 8000616:	d3e2      	bcc.n	80005de <SystemInit+0x2e>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000618:	f3bf 8f5f 	dmb	sy
}
 800061c:	46c0      	nop			; (mov r8, r8)
  }

  __DMB();
  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <SystemInit+0xa8>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <SystemInit+0xa8>)
 8000624:	2103      	movs	r1, #3
 8000626:	438a      	bics	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <SystemInit+0xa8>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <SystemInit+0xa8>)
 8000630:	2103      	movs	r1, #3
 8000632:	430a      	orrs	r2, r1
 8000634:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8000636:	f3bf 8f5f 	dmb	sy
}
 800063a:	46c0      	nop			; (mov r8, r8)
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	00000008 	.word	0x00000008
 8000648:	0000002c 	.word	0x0000002c
 800064c:	00000020 	.word	0x00000020
 8000650:	00000028 	.word	0x00000028
 8000654:	0000000c 	.word	0x0000000c
 8000658:	40010000 	.word	0x40010000

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	4847      	ldr	r0, [pc, #284]	; (800077c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0

  // STORE THE SYMBOLS EXPLICITLY TO AVOID PROBLEMS DURING SELF-BOOTSTRAPPING

  // Force flash begin address to global variable
  ldr r2, =gu32FlashBegin;
 8000660:	4a47      	ldr	r2, [pc, #284]	; (8000780 <LoopForever+0x8>)
  ldr r1, =__flash_begin
 8000662:	4948      	ldr	r1, [pc, #288]	; (8000784 <LoopForever+0xc>)
  str r1, [r2]
 8000664:	6011      	str	r1, [r2, #0]

  // Store r11 passed by bootloader as gu32FirmwareAbsPosition, need to use hoop Cortex-M0
  mov r7, r11
 8000666:	465f      	mov	r7, fp
  ldr r2, =gu32FirmwareAbsPosition
 8000668:	4a47      	ldr	r2, [pc, #284]	; (8000788 <LoopForever+0x10>)
  str r7, [r2]
 800066a:	6017      	str	r7, [r2, #0]

  // Store r12 passed by bootloader as gu32FirmwareOffset, need to use hoop for Cortex-M0
  mov r7, r12
 800066c:	4667      	mov	r7, ip
  ldr r2, =gu32FirmwareOffset
 800066e:	4a47      	ldr	r2, [pc, #284]	; (800078c <LoopForever+0x14>)
  str r7, [r2]
 8000670:	6017      	str	r7, [r2, #0]

  // Force ram vector table begin address to global variable
  ldr r2, =gu32RamVectorTableBegin;
 8000672:	4a47      	ldr	r2, [pc, #284]	; (8000790 <LoopForever+0x18>)
  ldr r1, =__ram_vector_table_begin
 8000674:	4947      	ldr	r1, [pc, #284]	; (8000794 <LoopForever+0x1c>)
  str r1, [r2]
 8000676:	6011      	str	r1, [r2, #0]

  // Force ram vector table end address to global variable
  ldr r2, =gu32RamVectorTableEnd;
 8000678:	4a47      	ldr	r2, [pc, #284]	; (8000798 <LoopForever+0x20>)
  ldr r1, =__ram_vector_table_end
 800067a:	4948      	ldr	r1, [pc, #288]	; (800079c <LoopForever+0x24>)
  str r1, [r2]
 800067c:	6011      	str	r1, [r2, #0]


  // If gu32FirmwareAbsPosition is zero, make it flash
  ldr r2, =gu32FirmwareAbsPosition // Load variable address
 800067e:	4a42      	ldr	r2, [pc, #264]	; (8000788 <LoopForever+0x10>)
  ldr r2, [r2] // Load variable data
 8000680:	6812      	ldr	r2, [r2, #0]
  cmp r2, #0 // Compare if data (which is in this case also an address, heh) is zero
 8000682:	2a00      	cmp	r2, #0
  bne FixZeroAbsEnd // If gu32FirmwareAbsPosition != zero, jump to end
 8000684:	d103      	bne.n	800068e <FixZeroAbsEnd>
  ldr r3, =gu32FlashBegin; // gu32FirmwareAbsPosition was zero, fix it. Get address of flash begin.
 8000686:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <LoopForever+0x8>)
  ldr r3, [r3] // Load the actual flash begin data (address)
 8000688:	681b      	ldr	r3, [r3, #0]
  ldr r2, =gu32FirmwareAbsPosition // Reload variable address
 800068a:	4a3f      	ldr	r2, [pc, #252]	; (8000788 <LoopForever+0x10>)
  str r3, [r2] // Finally store the data in r3 to address in r2
 800068c:	6013      	str	r3, [r2, #0]

0800068e <FixZeroAbsEnd>:
FixZeroAbsEnd:


GotPatchLoopInit:
	ldr r6, =gu32FirmwareOffset // Get firmware offset variable address
 800068e:	4e3f      	ldr	r6, [pc, #252]	; (800078c <LoopForever+0x14>)
	ldr r6, [r6]
 8000690:	6836      	ldr	r6, [r6, #0]
	movs r0, #0 // Loop variable
 8000692:	2000      	movs	r0, #0

08000694 <GotPatchLoopCond>:

GotPatchLoopCond:
	ldr r1, = __ram_got_begin
 8000694:	4942      	ldr	r1, [pc, #264]	; (80007a0 <LoopForever+0x28>)
	ldr r2, = __ram_got_end
 8000696:	4a43      	ldr	r2, [pc, #268]	; (80007a4 <LoopForever+0x2c>)
	subs r2, r2, r1 // How many bytes is the lenght
 8000698:	1a52      	subs	r2, r2, r1
	cmp r0, r2 // Check if loop is at end
 800069a:	4290      	cmp	r0, r2
	beq GotPatchEnd // Jump to end if compare equal
 800069c:	d018      	beq.n	80006d0 <GotPatchEnd>

0800069e <GotPatchLoopBody>:

GotPatchLoopBody:
	movs r1, r0 // Copy original loop counter value to r1
 800069e:	0001      	movs	r1, r0
	adds r0, r0, #4 // Increase original loop counter r0
 80006a0:	3004      	adds	r0, #4
	ldr r2, = __ram_got_begin // Load got ram start
 80006a2:	4a3f      	ldr	r2, [pc, #252]	; (80007a0 <LoopForever+0x28>)
	ldr r3, = __ram_begin // Load actual ram start
 80006a4:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <LoopForever+0x30>)
	subs r2, r2, r3 // r2 now has plain got offset from where ever
 80006a6:	1ad2      	subs	r2, r2, r3
	ldr r3, = __flash_begin // Start to assemble flash position
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <LoopForever+0xc>)
	adds r3, r3, r6 // Add firmware offset, which is still at r6
 80006aa:	199b      	adds	r3, r3, r6
	adds r3, r3, r2 // Add plain offset
 80006ac:	189b      	adds	r3, r3, r2
	adds r3, r3, r1 // Add loop offset to reading from flash
 80006ae:	185b      	adds	r3, r3, r1
	ldr r3, [r3] // Load actual table data from flash
 80006b0:	681b      	ldr	r3, [r3, #0]
	ldr r4, =__ram_begin // Assemble limit to check if over start of ram, in which case don't modify (it is ram or a peripheral)
 80006b2:	4c3d      	ldr	r4, [pc, #244]	; (80007a8 <LoopForever+0x30>)
	cmp r3, r4 // Compare address from got and start of ram
 80006b4:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address higher or same (hs) than start of ram, branch to copy got address as is
 80006b6:	d206      	bcs.n	80006c6 <GotStoreTableAddressToRam>
	ldr r4, =__flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 80006b8:	4c3c      	ldr	r4, [pc, #240]	; (80007ac <LoopForever+0x34>)
	cmp r3, r4 // Compare address from got and end of flash
 80006ba:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address address higher or same (hs) than end of flash, branch to store got table address data and hope for the best
 80006bc:	d203      	bcs.n	80006c6 <GotStoreTableAddressToRam>
	ldr r4, =__flash_begin // Assemble limit to check if under start of flash, in which case something is just wrong, so branch to store and hope for the best
 80006be:	4c31      	ldr	r4, [pc, #196]	; (8000784 <LoopForever+0xc>)
	cmp r3, r4 // Compare address from got and start of flash
 80006c0:	42a3      	cmp	r3, r4
	blo GotStoreTableAddressToRam // If address address lower (lo) than start of flash, branch to store got table address data and hope for the best
 80006c2:	d300      	bcc.n	80006c6 <GotStoreTableAddressToRam>
	adds r3, r3, r6 // Finally a position in flash. Add the offset.
 80006c4:	199b      	adds	r3, r3, r6

080006c6 <GotStoreTableAddressToRam>:

GotStoreTableAddressToRam:
	ldr r4, =__ram_begin// Start getting address in ram where to put the table address value
 80006c6:	4c38      	ldr	r4, [pc, #224]	; (80007a8 <LoopForever+0x30>)
	adds r4, r4, r2 // Add plain offset of got
 80006c8:	18a4      	adds	r4, r4, r2
	adds r4, r4, r1 // Add the original loop counter (is: 0, 4, 8, 12, ...)
 80006ca:	1864      	adds	r4, r4, r1
	str r3, [r4] // Add the table address to ram
 80006cc:	6023      	str	r3, [r4, #0]
	b GotPatchLoopCond // And go to check the loop
 80006ce:	e7e1      	b.n	8000694 <GotPatchLoopCond>

080006d0 <GotPatchEnd>:

GotPatchEnd:
	ldr r0, =__ram_got_begin
 80006d0:	4833      	ldr	r0, [pc, #204]	; (80007a0 <LoopForever+0x28>)
	mov r9, r0 // Stupid trick to put global offset table location to r9
 80006d2:	4681      	mov	r9, r0



/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006d6:	e006      	b.n	80006e6 <LoopCopyDataInit>

080006d8 <CopyDataInit>:

CopyDataInit:
	ldr r7, =gu32FirmwareOffset
 80006d8:	4f2c      	ldr	r7, [pc, #176]	; (800078c <LoopForever+0x14>)
	ldr r7, [r7]
 80006da:	683f      	ldr	r7, [r7, #0]
	ldr	r3, =_sidata
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <LoopForever+0x38>)
	adds r3, r3, r7
 80006de:	19db      	adds	r3, r3, r7
	ldr	r3, [r3, r1]
 80006e0:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006e2:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006e4:	3104      	adds	r1, #4

080006e6 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006e6:	4833      	ldr	r0, [pc, #204]	; (80007b4 <LoopForever+0x3c>)
	ldr	r3, =_edata
 80006e8:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <LoopForever+0x40>)
	adds	r2, r0, r1
 80006ea:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ec:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006ee:	d3f3      	bcc.n	80006d8 <CopyDataInit>
	ldr	r2, =_sbss
 80006f0:	4a32      	ldr	r2, [pc, #200]	; (80007bc <LoopForever+0x44>)
	adds r2, r2, r7
 80006f2:	19d2      	adds	r2, r2, r7
	b	LoopFillZerobss
 80006f4:	e013      	b.n	800071e <LoopFillZerobss>

080006f6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006f6:	2300      	movs	r3, #0
	adds r2, r2, #4 // Increment the loop counter already so ww avoid non-ending loops
 80006f8:	3204      	adds	r2, #4

	ldr r4, =gu32FlashBegin // Get flash begin variable address
 80006fa:	4c21      	ldr	r4, [pc, #132]	; (8000780 <LoopForever+0x8>)
	cmp r2, r4 // Compare address to the address we are going to zero
 80006fc:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 80006fe:	d00e      	beq.n	800071e <LoopFillZerobss>

	ldr r4, =gu32FirmwareAbsPosition // Get firmware abs position variable address
 8000700:	4c21      	ldr	r4, [pc, #132]	; (8000788 <LoopForever+0x10>)
	cmp r2, r4 // Compare address to the address we are going to zero
 8000702:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 8000704:	d00b      	beq.n	800071e <LoopFillZerobss>

	ldr r4, =gu32FirmwareOffset // Get firmware offset variable address
 8000706:	4c21      	ldr	r4, [pc, #132]	; (800078c <LoopForever+0x14>)
	cmp r2, r4 // Compare address to the address we are going to zero
 8000708:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 800070a:	d008      	beq.n	800071e <LoopFillZerobss>

	ldr r4, =gu32RamVectorTableBegin // Get vector table begin variable address
 800070c:	4c20      	ldr	r4, [pc, #128]	; (8000790 <LoopForever+0x18>)
	cmp r2, r4 // Compare address to the address we are going to zero
 800070e:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 8000710:	d005      	beq.n	800071e <LoopFillZerobss>

	ldr r4, =gu32RamVectorTableEnd // Get vector table end variable address
 8000712:	4c21      	ldr	r4, [pc, #132]	; (8000798 <LoopForever+0x20>)
	cmp r2, r4 // Compare address to the address we are going to zero
 8000714:	42a2      	cmp	r2, r4
	beq LoopFillZerobss // Jump away if would otherwise zero it
 8000716:	d002      	beq.n	800071e <LoopFillZerobss>

	subs r2, r2, #4 // Remove our own increment which was needed for special cases
 8000718:	3a04      	subs	r2, #4
	str	r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
	adds r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
	ldr r7, =gu32FirmwareOffset
 800071e:	4f1b      	ldr	r7, [pc, #108]	; (800078c <LoopForever+0x14>)
	ldr r7, [r7]
 8000720:	683f      	ldr	r7, [r7, #0]
	ldr	r3, =_ebss
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <LoopForever+0x48>)
	cmp	r2, r3
 8000724:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000726:	d3e6      	bcc.n	80006f6 <FillZerobss>



/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000728:	f7ff ff42 	bl	80005b0 <SystemInit>

0800072c <CallPreinitsInit>:



// Make our own __libc_init_array
CallPreinitsInit:
	ldr r7, =gu32FirmwareOffset
 800072c:	4f17      	ldr	r7, [pc, #92]	; (800078c <LoopForever+0x14>)
	ldr r7, [r7]
 800072e:	683f      	ldr	r7, [r7, #0]
	ldr r0, =__preinit_array_start
 8000730:	4824      	ldr	r0, [pc, #144]	; (80007c4 <LoopForever+0x4c>)
	adds r0, r7
 8000732:	19c0      	adds	r0, r0, r7
	ldr r1, =__preinit_array_end
 8000734:	4924      	ldr	r1, [pc, #144]	; (80007c8 <LoopForever+0x50>)
	adds r1, r7
 8000736:	19c9      	adds	r1, r1, r7

08000738 <CallPreinitsLoopCond>:

CallPreinitsLoopCond:
	cmp r0, r1
 8000738:	4288      	cmp	r0, r1
	beq CallPreinitsEnd// If same, it is at end, go away
 800073a:	d007      	beq.n	800074c <CallPreinitsEnd>

0800073c <CallPreinitsLoop>:

CallPreinitsLoop:
	ldr r5, =__init_array_start
 800073c:	4d23      	ldr	r5, [pc, #140]	; (80007cc <LoopForever+0x54>)
	ldr r4, =__init_array_end // Yes, order is funny to say the least
 800073e:	4c24      	ldr	r4, [pc, #144]	; (80007d0 <LoopForever+0x58>)
	ldr r3, [r0]
 8000740:	6803      	ldr	r3, [r0, #0]
	push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 8000742:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
	blx r3
 8000744:	4798      	blx	r3
	pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 8000746:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
	adds r0, r0, #4
 8000748:	3004      	adds	r0, #4
	b CallPreinitsLoopCond
 800074a:	e7f5      	b.n	8000738 <CallPreinitsLoopCond>

0800074c <CallPreinitsEnd>:

CallPreinitsEnd:
	ldr r3, =_init
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <LoopForever+0x5c>)
	adds r3, r7
 800074e:	19db      	adds	r3, r3, r7
	ldr r5, =__init_array_start
 8000750:	4d1e      	ldr	r5, [pc, #120]	; (80007cc <LoopForever+0x54>)
	adds r5, r7
 8000752:	19ed      	adds	r5, r5, r7
	ldr r4, =__init_array_end
 8000754:	4c1e      	ldr	r4, [pc, #120]	; (80007d0 <LoopForever+0x58>)
	adds r4, r7
 8000756:	19e4      	adds	r4, r4, r7
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 8000758:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 800075a:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 800075c:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}

0800075e <CallInitsInit>:

CallInitsInit:
	ldr r7, =gu32FirmwareOffset
 800075e:	4f0b      	ldr	r7, [pc, #44]	; (800078c <LoopForever+0x14>)
	ldr r7, [r7]
 8000760:	683f      	ldr	r7, [r7, #0]

08000762 <CallInitsLoopCond>:

CallInitsLoopCond:
	cmp r5, r4
 8000762:	42a5      	cmp	r5, r4
	beq CallInitsEnd
 8000764:	d006      	beq.n	8000774 <CallInitsEnd>

08000766 <CallInitsLoop>:

CallInitsLoop:
	ldr r3, [r5]
 8000766:	682b      	ldr	r3, [r5, #0]
	add r3, r3, r7
 8000768:	443b      	add	r3, r7
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 800076a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 800076c:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 800076e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
	adds r5, r5, #4
 8000770:	3504      	adds	r5, #4
	b CallInitsLoopCond
 8000772:	e7f6      	b.n	8000762 <CallInitsLoopCond>

08000774 <CallInitsEnd>:
CallInitsEnd:



/* Call the application's entry point.*/
  bl main
 8000774:	f7ff fd6e 	bl	8000254 <main>

08000778 <LoopForever>:



LoopForever:
  b LoopForever
 8000778:	e7fe      	b.n	8000778 <LoopForever>
 800077a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800077c:	20004000 	.word	0x20004000
  ldr r2, =gu32FlashBegin;
 8000780:	20000130 	.word	0x20000130
  ldr r1, =__flash_begin
 8000784:	08000000 	.word	0x08000000
  ldr r2, =gu32FirmwareAbsPosition
 8000788:	20000128 	.word	0x20000128
  ldr r2, =gu32FirmwareOffset
 800078c:	20000134 	.word	0x20000134
  ldr r2, =gu32RamVectorTableBegin;
 8000790:	20000138 	.word	0x20000138
  ldr r1, =__ram_vector_table_begin
 8000794:	20000000 	.word	0x20000000
  ldr r2, =gu32RamVectorTableEnd;
 8000798:	2000012c 	.word	0x2000012c
  ldr r1, =__ram_vector_table_end
 800079c:	200000c0 	.word	0x200000c0
	ldr r1, = __ram_got_begin
 80007a0:	200000c0 	.word	0x200000c0
	ldr r2, = __ram_got_end
 80007a4:	200000f4 	.word	0x200000f4
	ldr r3, = __ram_begin // Load actual ram start
 80007a8:	20000000 	.word	0x20000000
	ldr r4, =__flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 80007ac:	08020000 	.word	0x08020000
	ldr	r3, =_sidata
 80007b0:	08001c98 	.word	0x08001c98
	ldr	r0, =_sdata
 80007b4:	200000f4 	.word	0x200000f4
	ldr	r3, =_edata
 80007b8:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 80007bc:	2000010c 	.word	0x2000010c
	ldr	r3, =_ebss
 80007c0:	20000188 	.word	0x20000188
	ldr r0, =__preinit_array_start
 80007c4:	08001c90 	.word	0x08001c90
	ldr r1, =__preinit_array_end
 80007c8:	08001c90 	.word	0x08001c90
	ldr r5, =__init_array_start
 80007cc:	08001c90 	.word	0x08001c90
	ldr r4, =__init_array_end // Yes, order is funny to say the least
 80007d0:	08001c94 	.word	0x08001c94
	ldr r3, =_init
 80007d4:	08001c49 	.word	0x08001c49

080007d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_IRQHandler>
	...

080007dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <HAL_Init+0x24>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_Init+0x24>)
 80007e6:	2110      	movs	r1, #16
 80007e8:	430a      	orrs	r2, r1
 80007ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 f809 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f2:	f7ff fe4f 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	464c      	mov	r4, r9
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <HAL_InitTick+0x64>)
 8000810:	58e3      	ldr	r3, [r4, r3]
 8000812:	681d      	ldr	r5, [r3, #0]
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_InitTick+0x68>)
 8000816:	58e3      	ldr	r3, [r4, r3]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	0019      	movs	r1, r3
 800081c:	23fa      	movs	r3, #250	; 0xfa
 800081e:	0098      	lsls	r0, r3, #2
 8000820:	f7ff fc8c 	bl	800013c <__udivsi3>
 8000824:	0003      	movs	r3, r0
 8000826:	0019      	movs	r1, r3
 8000828:	0028      	movs	r0, r5
 800082a:	f7ff fc87 	bl	800013c <__udivsi3>
 800082e:	0003      	movs	r3, r0
 8000830:	0018      	movs	r0, r3
 8000832:	f000 f944 	bl	8000abe <HAL_SYSTICK_Config>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e010      	b.n	8000860 <HAL_InitTick+0x5c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d80c      	bhi.n	800085e <HAL_InitTick+0x5a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	2301      	movs	r3, #1
 8000848:	425b      	negs	r3, r3
 800084a:	2200      	movs	r2, #0
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f901 	bl	8000a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_InitTick+0x6c>)
 8000854:	58e3      	ldr	r3, [r4, r3]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x5c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bdb0      	pop	{r4, r5, r7, pc}
 8000868:	00000010 	.word	0x00000010
 800086c:	00000014 	.word	0x00000014
 8000870:	0000001c 	.word	0x0000001c

08000874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
 8000878:	464b      	mov	r3, r9
  uwTick += uwTickFreq;
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_IncTick+0x24>)
 800087c:	589a      	ldr	r2, [r3, r2]
 800087e:	7812      	ldrb	r2, [r2, #0]
 8000880:	0011      	movs	r1, r2
 8000882:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_IncTick+0x28>)
 8000884:	589a      	ldr	r2, [r3, r2]
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	188a      	adds	r2, r1, r2
 800088a:	4904      	ldr	r1, [pc, #16]	; (800089c <HAL_IncTick+0x28>)
 800088c:	585b      	ldr	r3, [r3, r1]
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	00000014 	.word	0x00000014
 800089c:	00000018 	.word	0x00000018

080008a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	464b      	mov	r3, r9
  return uwTick;
 80008a6:	4a03      	ldr	r2, [pc, #12]	; (80008b4 <HAL_GetTick+0x14>)
 80008a8:	589b      	ldr	r3, [r3, r2]
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	00000018 	.word	0x00000018

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0002      	movs	r2, r0
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ca:	d809      	bhi.n	80008e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	001a      	movs	r2, r3
 80008d2:	231f      	movs	r3, #31
 80008d4:	401a      	ands	r2, r3
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_EnableIRQ+0x30>)
 80008d8:	2101      	movs	r1, #1
 80008da:	4091      	lsls	r1, r2
 80008dc:	000a      	movs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
  }
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	0002      	movs	r2, r0
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b7f      	cmp	r3, #127	; 0x7f
 80008fe:	d810      	bhi.n	8000922 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	231f      	movs	r3, #31
 8000908:	4013      	ands	r3, r2
 800090a:	4908      	ldr	r1, [pc, #32]	; (800092c <__NVIC_DisableIRQ+0x40>)
 800090c:	2201      	movs	r2, #1
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000916:	f3bf 8f4f 	dsb	sy
}
 800091a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800091c:	f3bf 8f6f 	isb	sy
}
 8000920:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	0002      	movs	r2, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b7f      	cmp	r3, #127	; 0x7f
 8000944:	d828      	bhi.n	8000998 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <__NVIC_SetPriority+0xd4>)
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	089b      	lsrs	r3, r3, #2
 8000950:	33c0      	adds	r3, #192	; 0xc0
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	589b      	ldr	r3, [r3, r2]
 8000956:	1dfa      	adds	r2, r7, #7
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	0011      	movs	r1, r2
 800095c:	2203      	movs	r2, #3
 800095e:	400a      	ands	r2, r1
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	21ff      	movs	r1, #255	; 0xff
 8000964:	4091      	lsls	r1, r2
 8000966:	000a      	movs	r2, r1
 8000968:	43d2      	mvns	r2, r2
 800096a:	401a      	ands	r2, r3
 800096c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	019b      	lsls	r3, r3, #6
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	401a      	ands	r2, r3
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0018      	movs	r0, r3
 800097c:	2303      	movs	r3, #3
 800097e:	4003      	ands	r3, r0
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	481f      	ldr	r0, [pc, #124]	; (8000a04 <__NVIC_SetPriority+0xd4>)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	430a      	orrs	r2, r1
 8000990:	33c0      	adds	r3, #192	; 0xc0
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000996:	e031      	b.n	80009fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <__NVIC_SetPriority+0xd8>)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0019      	movs	r1, r3
 80009a0:	230f      	movs	r3, #15
 80009a2:	400b      	ands	r3, r1
 80009a4:	3b08      	subs	r3, #8
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3306      	adds	r3, #6
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	18d3      	adds	r3, r2, r3
 80009ae:	3304      	adds	r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1dfa      	adds	r2, r7, #7
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	0011      	movs	r1, r2
 80009b8:	2203      	movs	r2, #3
 80009ba:	400a      	ands	r2, r1
 80009bc:	00d2      	lsls	r2, r2, #3
 80009be:	21ff      	movs	r1, #255	; 0xff
 80009c0:	4091      	lsls	r1, r2
 80009c2:	000a      	movs	r2, r1
 80009c4:	43d2      	mvns	r2, r2
 80009c6:	401a      	ands	r2, r3
 80009c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	019b      	lsls	r3, r3, #6
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	401a      	ands	r2, r3
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	0018      	movs	r0, r3
 80009d8:	2303      	movs	r3, #3
 80009da:	4003      	ands	r3, r0
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <__NVIC_SetPriority+0xd8>)
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	001c      	movs	r4, r3
 80009e8:	230f      	movs	r3, #15
 80009ea:	4023      	ands	r3, r4
 80009ec:	3b08      	subs	r3, #8
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	430a      	orrs	r2, r1
 80009f2:	3306      	adds	r3, #6
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	18c3      	adds	r3, r0, r3
 80009f8:	3304      	adds	r3, #4
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b003      	add	sp, #12
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	045b      	lsls	r3, r3, #17
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d301      	bcc.n	8000a24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a20:	2301      	movs	r3, #1
 8000a22:	e010      	b.n	8000a46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SysTick_Config+0x44>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	425b      	negs	r3, r3
 8000a30:	2103      	movs	r1, #3
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff ff7c 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SysTick_Config+0x44>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SysTick_Config+0x44>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	0018      	movs	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	210f      	movs	r1, #15
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	1c02      	adds	r2, r0, #0
 8000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b004      	add	sp, #16
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	0002      	movs	r2, r0
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff11 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ff1b 	bl	80008ec <__NVIC_DisableIRQ>
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff9f 	bl	8000a0c <SysTick_Config>
 8000ace:	0003      	movs	r3, r0
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae6:	e14f      	b.n	8000d88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2101      	movs	r1, #1
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	4091      	lsls	r1, r2
 8000af2:	000a      	movs	r2, r1
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d100      	bne.n	8000b00 <HAL_GPIO_Init+0x28>
 8000afe:	e140      	b.n	8000d82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d00b      	beq.n	8000b20 <HAL_GPIO_Init+0x48>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d007      	beq.n	8000b20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b14:	2b11      	cmp	r3, #17
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b12      	cmp	r3, #18
 8000b1e:	d130      	bne.n	8000b82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	0013      	movs	r3, r2
 8000b30:	43da      	mvns	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b56:	2201      	movs	r2, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	43da      	mvns	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0xea>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d123      	bne.n	8000c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	08da      	lsrs	r2, r3, #3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3208      	adds	r2, #8
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	58d3      	ldr	r3, [r2, r3]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	220f      	movs	r2, #15
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2107      	movs	r1, #7
 8000bee:	400b      	ands	r3, r1
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	6939      	ldr	r1, [r7, #16]
 8000c08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	409a      	lsls	r2, r3
 8000c18:	0013      	movs	r3, r2
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2203      	movs	r2, #3
 8000c28:	401a      	ands	r2, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	055b      	lsls	r3, r3, #21
 8000c46:	4013      	ands	r3, r2
 8000c48:	d100      	bne.n	8000c4c <HAL_GPIO_Init+0x174>
 8000c4a:	e09a      	b.n	8000d82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4c:	4b54      	ldr	r3, [pc, #336]	; (8000da0 <HAL_GPIO_Init+0x2c8>)
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	4b53      	ldr	r3, [pc, #332]	; (8000da0 <HAL_GPIO_Init+0x2c8>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	430a      	orrs	r2, r1
 8000c56:	619a      	str	r2, [r3, #24]
 8000c58:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <HAL_GPIO_Init+0x2c8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c64:	4a4f      	ldr	r2, [pc, #316]	; (8000da4 <HAL_GPIO_Init+0x2cc>)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	589b      	ldr	r3, [r3, r2]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	43da      	mvns	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	2390      	movs	r3, #144	; 0x90
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d013      	beq.n	8000cba <HAL_GPIO_Init+0x1e2>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a44      	ldr	r2, [pc, #272]	; (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00d      	beq.n	8000cb6 <HAL_GPIO_Init+0x1de>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a43      	ldr	r2, [pc, #268]	; (8000dac <HAL_GPIO_Init+0x2d4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d007      	beq.n	8000cb2 <HAL_GPIO_Init+0x1da>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <HAL_GPIO_Init+0x2d8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_GPIO_Init+0x1d6>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x1e4>
 8000cae:	2305      	movs	r3, #5
 8000cb0:	e004      	b.n	8000cbc <HAL_GPIO_Init+0x1e4>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x1e4>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x1e4>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	4093      	lsls	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ccc:	4935      	ldr	r1, [pc, #212]	; (8000da4 <HAL_GPIO_Init+0x2cc>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	025b      	lsls	r3, r3, #9
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	035b      	lsls	r3, r3, #13
 8000d46:	4013      	ands	r3, r2
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43da      	mvns	r2, r3
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	039b      	lsls	r3, r3, #14
 8000d70:	4013      	ands	r3, r2
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_GPIO_Init+0x2dc>)
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	40da      	lsrs	r2, r3
 8000d90:	1e13      	subs	r3, r2, #0
 8000d92:	d000      	beq.n	8000d96 <HAL_GPIO_Init+0x2be>
 8000d94:	e6a8      	b.n	8000ae8 <HAL_GPIO_Init+0x10>
  } 
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b006      	add	sp, #24
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	48000400 	.word	0x48000400
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000c00 	.word	0x48000c00
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	0008      	movs	r0, r1
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	1cbb      	adds	r3, r7, #2
 8000dc6:	1c02      	adds	r2, r0, #0
 8000dc8:	801a      	strh	r2, [r3, #0]
 8000dca:	1c7b      	adds	r3, r7, #1
 8000dcc:	1c0a      	adds	r2, r1, #0
 8000dce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd0:	1c7b      	adds	r3, r7, #1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd8:	1cbb      	adds	r3, r7, #2
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de0:	e003      	b.n	8000dea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de2:	1cbb      	adds	r3, r7, #2
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	1cbb      	adds	r3, r7, #2
 8000dfe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e06:	1cbb      	adds	r3, r7, #2
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	041a      	lsls	r2, r3, #16
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	1cb9      	adds	r1, r7, #2
 8000e16:	8809      	ldrh	r1, [r1, #0]
 8000e18:	400b      	ands	r3, r1
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e305      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	d100      	bne.n	8000e46 <HAL_RCC_OscConfig+0x1e>
 8000e44:	e08d      	b.n	8000f62 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e46:	4bc5      	ldr	r3, [pc, #788]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d00e      	beq.n	8000e70 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e52:	4bc2      	ldr	r3, [pc, #776]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	220c      	movs	r2, #12
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d116      	bne.n	8000e8c <HAL_RCC_OscConfig+0x64>
 8000e5e:	4bbf      	ldr	r3, [pc, #764]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	025b      	lsls	r3, r3, #9
 8000e66:	401a      	ands	r2, r3
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	025b      	lsls	r3, r3, #9
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d10d      	bne.n	8000e8c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	4bba      	ldr	r3, [pc, #744]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	029b      	lsls	r3, r3, #10
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d100      	bne.n	8000e7e <HAL_RCC_OscConfig+0x56>
 8000e7c:	e070      	b.n	8000f60 <HAL_RCC_OscConfig+0x138>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d000      	beq.n	8000e88 <HAL_RCC_OscConfig+0x60>
 8000e86:	e06b      	b.n	8000f60 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e2dc      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d107      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x7c>
 8000e94:	4bb1      	ldr	r3, [pc, #708]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4bb0      	ldr	r3, [pc, #704]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0249      	lsls	r1, r1, #9
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e02f      	b.n	8000f04 <HAL_RCC_OscConfig+0xdc>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10c      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x9e>
 8000eac:	4bab      	ldr	r3, [pc, #684]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4baa      	ldr	r3, [pc, #680]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000eb2:	49ab      	ldr	r1, [pc, #684]	; (8001160 <HAL_RCC_OscConfig+0x338>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	4ba8      	ldr	r3, [pc, #672]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4ba7      	ldr	r3, [pc, #668]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000ebe:	49a9      	ldr	r1, [pc, #676]	; (8001164 <HAL_RCC_OscConfig+0x33c>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e01e      	b.n	8000f04 <HAL_RCC_OscConfig+0xdc>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d10e      	bne.n	8000eec <HAL_RCC_OscConfig+0xc4>
 8000ece:	4ba3      	ldr	r3, [pc, #652]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4ba2      	ldr	r3, [pc, #648]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	02c9      	lsls	r1, r1, #11
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	4b9f      	ldr	r3, [pc, #636]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b9e      	ldr	r3, [pc, #632]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0xdc>
 8000eec:	4b9b      	ldr	r3, [pc, #620]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b9a      	ldr	r3, [pc, #616]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000ef2:	499b      	ldr	r1, [pc, #620]	; (8001160 <HAL_RCC_OscConfig+0x338>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4b98      	ldr	r3, [pc, #608]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b97      	ldr	r3, [pc, #604]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000efe:	4999      	ldr	r1, [pc, #612]	; (8001164 <HAL_RCC_OscConfig+0x33c>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d014      	beq.n	8000f36 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fcc8 	bl	80008a0 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fcc3 	bl	80008a0 <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e28e      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	4b8c      	ldr	r3, [pc, #560]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0xee>
 8000f34:	e015      	b.n	8000f62 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fcb3 	bl	80008a0 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fcae 	bl	80008a0 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e279      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b82      	ldr	r3, [pc, #520]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x118>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d100      	bne.n	8000f6e <HAL_RCC_OscConfig+0x146>
 8000f6c:	e06c      	b.n	8001048 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6e:	4b7b      	ldr	r3, [pc, #492]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	220c      	movs	r2, #12
 8000f74:	4013      	ands	r3, r2
 8000f76:	d00e      	beq.n	8000f96 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f78:	4b78      	ldr	r3, [pc, #480]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d11f      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x19c>
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	23c0      	movs	r3, #192	; 0xc0
 8000f8a:	025b      	lsls	r3, r3, #9
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d116      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	4b71      	ldr	r3, [pc, #452]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_OscConfig+0x184>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d001      	beq.n	8000fac <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e24c      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4b6b      	ldr	r3, [pc, #428]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	22f8      	movs	r2, #248	; 0xf8
 8000fb2:	4393      	bics	r3, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	00da      	lsls	r2, r3, #3
 8000fbc:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc2:	e041      	b.n	8001048 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d024      	beq.n	8001016 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fcc:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b62      	ldr	r3, [pc, #392]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc62 	bl	80008a0 <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fc5d 	bl	80008a0 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e228      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	4b59      	ldr	r3, [pc, #356]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d0f1      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	22f8      	movs	r2, #248	; 0xf8
 8001004:	4393      	bics	r3, r2
 8001006:	0019      	movs	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	00da      	lsls	r2, r3, #3
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e018      	b.n	8001048 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001016:	4b51      	ldr	r3, [pc, #324]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b50      	ldr	r3, [pc, #320]	; (800115c <HAL_RCC_OscConfig+0x334>)
 800101c:	2101      	movs	r1, #1
 800101e:	438a      	bics	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fc3d 	bl	80008a0 <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fc38 	bl	80008a0 <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e203      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	4b47      	ldr	r3, [pc, #284]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d1f1      	bne.n	800102c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4013      	ands	r3, r2
 8001050:	d036      	beq.n	80010c0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d019      	beq.n	800108e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105a:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_RCC_OscConfig+0x334>)
 800105c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105e:	4b3f      	ldr	r3, [pc, #252]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001060:	2101      	movs	r1, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fc1b 	bl	80008a0 <HAL_GetTick>
 800106a:	0003      	movs	r3, r0
 800106c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fc16 	bl	80008a0 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1e1      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2202      	movs	r2, #2
 8001088:	4013      	ands	r3, r2
 800108a:	d0f1      	beq.n	8001070 <HAL_RCC_OscConfig+0x248>
 800108c:	e018      	b.n	80010c0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001092:	4b32      	ldr	r3, [pc, #200]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001094:	2101      	movs	r1, #1
 8001096:	438a      	bics	r2, r1
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fc01 	bl	80008a0 <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fbfc 	bl	80008a0 <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e1c7      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_RCC_OscConfig+0x334>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d1f1      	bne.n	80010a4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2204      	movs	r2, #4
 80010c6:	4013      	ands	r3, r2
 80010c8:	d100      	bne.n	80010cc <HAL_RCC_OscConfig+0x2a4>
 80010ca:	e0b5      	b.n	8001238 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010cc:	201f      	movs	r0, #31
 80010ce:	183b      	adds	r3, r7, r0
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x334>)
 80010d6:	69da      	ldr	r2, [r3, #28]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	055b      	lsls	r3, r3, #21
 80010dc:	4013      	ands	r3, r2
 80010de:	d110      	bne.n	8001102 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_RCC_OscConfig+0x334>)
 80010e2:	69da      	ldr	r2, [r3, #28]
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_RCC_OscConfig+0x334>)
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	0549      	lsls	r1, r1, #21
 80010ea:	430a      	orrs	r2, r1
 80010ec:	61da      	str	r2, [r3, #28]
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_RCC_OscConfig+0x334>)
 80010f0:	69da      	ldr	r2, [r3, #28]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	055b      	lsls	r3, r3, #21
 80010f6:	4013      	ands	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_RCC_OscConfig+0x340>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4013      	ands	r3, r2
 800110c:	d11a      	bne.n	8001144 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_RCC_OscConfig+0x340>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_RCC_OscConfig+0x340>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0049      	lsls	r1, r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111c:	f7ff fbc0 	bl	80008a0 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001126:	f7ff fbbb 	bl	80008a0 <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e186      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_RCC_OscConfig+0x340>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10f      	bne.n	800116c <HAL_RCC_OscConfig+0x344>
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_RCC_OscConfig+0x334>)
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_RCC_OscConfig+0x334>)
 8001152:	2101      	movs	r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	621a      	str	r2, [r3, #32]
 8001158:	e036      	b.n	80011c8 <HAL_RCC_OscConfig+0x3a0>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40021000 	.word	0x40021000
 8001160:	fffeffff 	.word	0xfffeffff
 8001164:	fffbffff 	.word	0xfffbffff
 8001168:	40007000 	.word	0x40007000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10c      	bne.n	800118e <HAL_RCC_OscConfig+0x366>
 8001174:	4bb6      	ldr	r3, [pc, #728]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001176:	6a1a      	ldr	r2, [r3, #32]
 8001178:	4bb5      	ldr	r3, [pc, #724]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800117a:	2101      	movs	r1, #1
 800117c:	438a      	bics	r2, r1
 800117e:	621a      	str	r2, [r3, #32]
 8001180:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4bb2      	ldr	r3, [pc, #712]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001186:	2104      	movs	r1, #4
 8001188:	438a      	bics	r2, r1
 800118a:	621a      	str	r2, [r3, #32]
 800118c:	e01c      	b.n	80011c8 <HAL_RCC_OscConfig+0x3a0>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x388>
 8001196:	4bae      	ldr	r3, [pc, #696]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	4bad      	ldr	r3, [pc, #692]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800119c:	2104      	movs	r1, #4
 800119e:	430a      	orrs	r2, r1
 80011a0:	621a      	str	r2, [r3, #32]
 80011a2:	4bab      	ldr	r3, [pc, #684]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80011a4:	6a1a      	ldr	r2, [r3, #32]
 80011a6:	4baa      	ldr	r3, [pc, #680]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	621a      	str	r2, [r3, #32]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0x3a0>
 80011b0:	4ba7      	ldr	r3, [pc, #668]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	438a      	bics	r2, r1
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	4ba4      	ldr	r3, [pc, #656]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80011c2:	2104      	movs	r1, #4
 80011c4:	438a      	bics	r2, r1
 80011c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d014      	beq.n	80011fa <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d0:	f7ff fb66 	bl	80008a0 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d8:	e009      	b.n	80011ee <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff fb61 	bl	80008a0 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4a9b      	ldr	r2, [pc, #620]	; (8001454 <HAL_RCC_OscConfig+0x62c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e12b      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ee:	4b98      	ldr	r3, [pc, #608]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x3b2>
 80011f8:	e013      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb51 	bl	80008a0 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001202:	e009      	b.n	8001218 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001204:	f7ff fb4c 	bl	80008a0 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	4a91      	ldr	r2, [pc, #580]	; (8001454 <HAL_RCC_OscConfig+0x62c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e116      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	4b8d      	ldr	r3, [pc, #564]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	2202      	movs	r2, #2
 800121e:	4013      	ands	r3, r2
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001222:	231f      	movs	r3, #31
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	4b87      	ldr	r3, [pc, #540]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001232:	4989      	ldr	r1, [pc, #548]	; (8001458 <HAL_RCC_OscConfig+0x630>)
 8001234:	400a      	ands	r2, r1
 8001236:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2210      	movs	r2, #16
 800123e:	4013      	ands	r3, r2
 8001240:	d063      	beq.n	800130a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d12a      	bne.n	80012a0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800124a:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800124c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800124e:	4b80      	ldr	r3, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001250:	2104      	movs	r1, #4
 8001252:	430a      	orrs	r2, r1
 8001254:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001256:	4b7e      	ldr	r3, [pc, #504]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fb1d 	bl	80008a0 <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800126c:	f7ff fb18 	bl	80008a0 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e0e3      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800127e:	4b74      	ldr	r3, [pc, #464]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d0f1      	beq.n	800126c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001288:	4b71      	ldr	r3, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	22f8      	movs	r2, #248	; 0xf8
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	00da      	lsls	r2, r3, #3
 8001298:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
 800129e:	e034      	b.n	800130a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	3305      	adds	r3, #5
 80012a6:	d111      	bne.n	80012cc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012a8:	4b69      	ldr	r3, [pc, #420]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012ae:	2104      	movs	r1, #4
 80012b0:	438a      	bics	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012b4:	4b66      	ldr	r3, [pc, #408]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b8:	22f8      	movs	r2, #248	; 0xf8
 80012ba:	4393      	bics	r3, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	00da      	lsls	r2, r3, #3
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ca:	e01e      	b.n	800130a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012cc:	4b60      	ldr	r3, [pc, #384]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d0:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012d2:	2104      	movs	r1, #4
 80012d4:	430a      	orrs	r2, r1
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012dc:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80012de:	2101      	movs	r1, #1
 80012e0:	438a      	bics	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fadc 	bl	80008a0 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012ee:	f7ff fad7 	bl	80008a0 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0a2      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001304:	2202      	movs	r2, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d1f1      	bne.n	80012ee <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <HAL_RCC_OscConfig+0x4ec>
 8001312:	e097      	b.n	8001444 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	220c      	movs	r2, #12
 800131a:	4013      	ands	r3, r2
 800131c:	2b08      	cmp	r3, #8
 800131e:	d100      	bne.n	8001322 <HAL_RCC_OscConfig+0x4fa>
 8001320:	e06b      	b.n	80013fa <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d14c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b48      	ldr	r3, [pc, #288]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001330:	494a      	ldr	r1, [pc, #296]	; (800145c <HAL_RCC_OscConfig+0x634>)
 8001332:	400a      	ands	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fab3 	bl	80008a0 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff faae 	bl	80008a0 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e079      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	049b      	lsls	r3, r3, #18
 800135a:	4013      	ands	r3, r2
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	220f      	movs	r2, #15
 8001364:	4393      	bics	r3, r2
 8001366:	0019      	movs	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800136e:	430a      	orrs	r2, r1
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <HAL_RCC_OscConfig+0x638>)
 8001378:	4013      	ands	r3, r2
 800137a:	0019      	movs	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	431a      	orrs	r2, r3
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001388:	430a      	orrs	r2, r1
 800138a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0449      	lsls	r1, r1, #17
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fa81 	bl	80008a0 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fa7c 	bl	80008a0 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e047      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	049b      	lsls	r3, r3, #18
 80013be:	4013      	ands	r3, r2
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x57c>
 80013c2:	e03f      	b.n	8001444 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80013ca:	4924      	ldr	r1, [pc, #144]	; (800145c <HAL_RCC_OscConfig+0x634>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fa66 	bl	80008a0 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fa61 	bl	80008a0 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e02c      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	049b      	lsls	r3, r3, #18
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x5b2>
 80013f8:	e024      	b.n	8001444 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e01f      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x628>)
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	23c0      	movs	r3, #192	; 0xc0
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	401a      	ands	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	429a      	cmp	r2, r3
 8001420:	d10e      	bne.n	8001440 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	220f      	movs	r2, #15
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	23f0      	movs	r3, #240	; 0xf0
 8001434:	039b      	lsls	r3, r3, #14
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b008      	add	sp, #32
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000
 8001454:	00001388 	.word	0x00001388
 8001458:	efffffff 	.word	0xefffffff
 800145c:	feffffff 	.word	0xfeffffff
 8001460:	ffc27fff 	.word	0xffc27fff

08001464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	464c      	mov	r4, r9
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0b5      	b.n	80015e6 <HAL_RCC_ClockConfig+0x182>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800147a:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2201      	movs	r2, #1
 8001480:	4013      	ands	r3, r2
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d911      	bls.n	80014ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2201      	movs	r2, #1
 80014a0:	4013      	ands	r3, r2
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e09c      	b.n	80015e6 <HAL_RCC_ClockConfig+0x182>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2202      	movs	r2, #2
 80014b2:	4013      	ands	r3, r2
 80014b4:	d015      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x7e>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2204      	movs	r2, #4
 80014bc:	4013      	ands	r3, r2
 80014be:	d006      	beq.n	80014ce <HAL_RCC_ClockConfig+0x6a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014c0:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80014c6:	21e0      	movs	r1, #224	; 0xe0
 80014c8:	00c9      	lsls	r1, r1, #3
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	22f0      	movs	r2, #240	; 0xf0
 80014d4:	4393      	bics	r3, r2
 80014d6:	0019      	movs	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	d040      	beq.n	800156e <HAL_RCC_ClockConfig+0x10a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d107      	bne.n	8001504 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f4:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	029b      	lsls	r3, r3, #10
 80014fc:	4013      	ands	r3, r2
 80014fe:	d114      	bne.n	800152a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e070      	b.n	80015e6 <HAL_RCC_ClockConfig+0x182>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d107      	bne.n	800151c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	049b      	lsls	r3, r3, #18
 8001514:	4013      	ands	r3, r2
 8001516:	d108      	bne.n	800152a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e064      	b.n	80015e6 <HAL_RCC_ClockConfig+0x182>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2202      	movs	r2, #2
 8001522:	4013      	ands	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e05d      	b.n	80015e6 <HAL_RCC_ClockConfig+0x182>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	4393      	bics	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800153e:	f7ff f9af 	bl	80008a0 <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e009      	b.n	800155c <HAL_RCC_ClockConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff f9aa 	bl	80008a0 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a29      	ldr	r2, [pc, #164]	; (80015f8 <HAL_RCC_ClockConfig+0x194>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e044      	b.n	80015e6 <HAL_RCC_ClockConfig+0x182>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	220c      	movs	r2, #12
 8001562:	401a      	ands	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	429a      	cmp	r2, r3
 800156c:	d1ec      	bne.n	8001548 <HAL_RCC_ClockConfig+0xe4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4013      	ands	r3, r2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d211      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x13c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	4393      	bics	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_RCC_ClockConfig+0x18c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	4013      	ands	r3, r2
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x13c>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e022      	b.n	80015e6 <HAL_RCC_ClockConfig+0x182>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2204      	movs	r2, #4
 80015a6:	4013      	ands	r3, r2
 80015a8:	d009      	beq.n	80015be <HAL_RCC_ClockConfig+0x15a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_RCC_ClockConfig+0x198>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015be:	f000 f823 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80015c2:	0001      	movs	r1, r0
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_ClockConfig+0x190>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	220f      	movs	r2, #15
 80015cc:	4013      	ands	r3, r2
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_RCC_ClockConfig+0x19c>)
 80015d0:	58a2      	ldr	r2, [r4, r2]
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	000a      	movs	r2, r1
 80015d6:	40da      	lsrs	r2, r3
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_RCC_ClockConfig+0x1a0>)
 80015da:	58e3      	ldr	r3, [r4, r3]
 80015dc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff f910 	bl	8000804 <HAL_InitTick>
  
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b005      	add	sp, #20
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40022000 	.word	0x40022000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	00001388 	.word	0x00001388
 80015fc:	fffff8ff 	.word	0xfffff8ff
 8001600:	00000024 	.word	0x00000024
 8001604:	00000010 	.word	0x00000010

08001608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0
 800160e:	4649      	mov	r1, r9
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001610:	2314      	movs	r3, #20
 8001612:	18f8      	adds	r0, r7, r3
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001616:	58ca      	ldr	r2, [r1, r3]
 8001618:	0003      	movs	r3, r0
 800161a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800161c:	c331      	stmia	r3!, {r0, r4, r5}
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001622:	1d38      	adds	r0, r7, #4
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001626:	58ca      	ldr	r2, [r1, r3]
 8001628:	0003      	movs	r3, r0
 800162a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800162c:	c313      	stmia	r3!, {r0, r1, r4}
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	220c      	movs	r2, #12
 8001650:	4013      	ands	r3, r2
 8001652:	2b04      	cmp	r3, #4
 8001654:	d002      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x54>
 8001656:	2b08      	cmp	r3, #8
 8001658:	d003      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x5a>
 800165a:	e02f      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0xb4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001660:	e02f      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	0c9b      	lsrs	r3, r3, #18
 8001666:	220f      	movs	r2, #15
 8001668:	4013      	ands	r3, r2
 800166a:	2214      	movs	r2, #20
 800166c:	18ba      	adds	r2, r7, r2
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	220f      	movs	r2, #15
 8001678:	4013      	ands	r3, r2
 800167a:	1d3a      	adds	r2, r7, #4
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	401a      	ands	r2, r3
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	025b      	lsls	r3, r3, #9
 800168c:	429a      	cmp	r2, r3
 800168e:	d109      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001694:	f7fe fd52 	bl	800013c <__udivsi3>
 8001698:	0003      	movs	r3, r0
 800169a:	001a      	movs	r2, r3
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	4353      	muls	r3, r2
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0xae>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016a6:	480c      	ldr	r0, [pc, #48]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016a8:	f7fe fd48 	bl	800013c <__udivsi3>
 80016ac:	0003      	movs	r3, r0
 80016ae:	001a      	movs	r2, r3
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	4353      	muls	r3, r2
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016ba:	e002      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0xba>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016c0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b00e      	add	sp, #56	; 0x38
 80016ca:	bdb0      	pop	{r4, r5, r7, pc}
 80016cc:	00000000 	.word	0x00000000
 80016d0:	00000004 	.word	0x00000004
 80016d4:	40021000 	.word	0x40021000
 80016d8:	007a1200 	.word	0x007a1200

080016dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e042      	b.n	8001774 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	223d      	movs	r2, #61	; 0x3d
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d107      	bne.n	800170a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	223c      	movs	r2, #60	; 0x3c
 80016fe:	2100      	movs	r1, #0
 8001700:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0018      	movs	r0, r3
 8001706:	f7fe fee9 	bl	80004dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	223d      	movs	r2, #61	; 0x3d
 800170e:	2102      	movs	r1, #2
 8001710:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	0019      	movs	r1, r3
 800171c:	0010      	movs	r0, r2
 800171e:	f000 fa05 	bl	8001b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2246      	movs	r2, #70	; 0x46
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	223e      	movs	r2, #62	; 0x3e
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	223f      	movs	r2, #63	; 0x3f
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2241      	movs	r2, #65	; 0x41
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2242      	movs	r2, #66	; 0x42
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2243      	movs	r2, #67	; 0x43
 8001756:	2101      	movs	r1, #1
 8001758:	5499      	strb	r1, [r3, r2]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2244      	movs	r2, #68	; 0x44
 800175e:	2101      	movs	r1, #1
 8001760:	5499      	strb	r1, [r3, r2]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2245      	movs	r2, #69	; 0x45
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	223d      	movs	r2, #61	; 0x3d
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	223d      	movs	r2, #61	; 0x3d
 8001788:	2102      	movs	r1, #2
 800178a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a23      	ldr	r2, [pc, #140]	; (8001820 <HAL_TIM_Base_DeInit+0xa4>)
 8001794:	4013      	ands	r3, r2
 8001796:	d10d      	bne.n	80017b4 <HAL_TIM_Base_DeInit+0x38>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <HAL_TIM_Base_DeInit+0xa8>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	d107      	bne.n	80017b4 <HAL_TIM_Base_DeInit+0x38>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2101      	movs	r1, #1
 80017b0:	438a      	bics	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7fe feb8 	bl	800052c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2246      	movs	r2, #70	; 0x46
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	223e      	movs	r2, #62	; 0x3e
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	223f      	movs	r2, #63	; 0x3f
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2240      	movs	r2, #64	; 0x40
 80017d8:	2100      	movs	r1, #0
 80017da:	5499      	strb	r1, [r3, r2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2241      	movs	r2, #65	; 0x41
 80017e0:	2100      	movs	r1, #0
 80017e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2242      	movs	r2, #66	; 0x42
 80017e8:	2100      	movs	r1, #0
 80017ea:	5499      	strb	r1, [r3, r2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2243      	movs	r2, #67	; 0x43
 80017f0:	2100      	movs	r1, #0
 80017f2:	5499      	strb	r1, [r3, r2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2244      	movs	r2, #68	; 0x44
 80017f8:	2100      	movs	r1, #0
 80017fa:	5499      	strb	r1, [r3, r2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2245      	movs	r2, #69	; 0x45
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	223d      	movs	r2, #61	; 0x3d
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	223c      	movs	r2, #60	; 0x3c
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	00001111 	.word	0x00001111
 8001824:	00000444 	.word	0x00000444

08001828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	223d      	movs	r2, #61	; 0x3d
 8001834:	5c9b      	ldrb	r3, [r3, r2]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d001      	beq.n	8001840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e035      	b.n	80018ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	223d      	movs	r2, #61	; 0x3d
 8001844:	2102      	movs	r1, #2
 8001846:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <HAL_TIM_Base_Start_IT+0x8c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d009      	beq.n	8001876 <HAL_TIM_Base_Start_IT+0x4e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_TIM_Base_Start_IT+0x90>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d004      	beq.n	8001876 <HAL_TIM_Base_Start_IT+0x4e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_TIM_Base_Start_IT+0x94>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d111      	bne.n	800189a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2207      	movs	r2, #7
 800187e:	4013      	ands	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b06      	cmp	r3, #6
 8001886:	d010      	beq.n	80018aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2101      	movs	r1, #1
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001898:	e007      	b.n	80018aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b004      	add	sp, #16
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40000400 	.word	0x40000400
 80018bc:	40014000 	.word	0x40014000

080018c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d124      	bne.n	8001920 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d11d      	bne.n	8001920 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2203      	movs	r2, #3
 80018ea:	4252      	negs	r2, r2
 80018ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2203      	movs	r2, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	d004      	beq.n	800190a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	0018      	movs	r0, r3
 8001904:	f000 f8fa 	bl	8001afc <HAL_TIM_IC_CaptureCallback>
 8001908:	e007      	b.n	800191a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f000 f8ed 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 f8f9 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2204      	movs	r2, #4
 8001928:	4013      	ands	r3, r2
 800192a:	2b04      	cmp	r3, #4
 800192c:	d125      	bne.n	800197a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2204      	movs	r2, #4
 8001936:	4013      	ands	r3, r2
 8001938:	2b04      	cmp	r3, #4
 800193a:	d11e      	bne.n	800197a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2205      	movs	r2, #5
 8001942:	4252      	negs	r2, r2
 8001944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 f8cd 	bl	8001afc <HAL_TIM_IC_CaptureCallback>
 8001962:	e007      	b.n	8001974 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f000 f8c0 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	0018      	movs	r0, r3
 8001970:	f000 f8cc 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2208      	movs	r2, #8
 8001982:	4013      	ands	r3, r2
 8001984:	2b08      	cmp	r3, #8
 8001986:	d124      	bne.n	80019d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2208      	movs	r2, #8
 8001990:	4013      	ands	r3, r2
 8001992:	2b08      	cmp	r3, #8
 8001994:	d11d      	bne.n	80019d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2209      	movs	r2, #9
 800199c:	4252      	negs	r2, r2
 800199e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2204      	movs	r2, #4
 80019a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2203      	movs	r2, #3
 80019ae:	4013      	ands	r3, r2
 80019b0:	d004      	beq.n	80019bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 f8a1 	bl	8001afc <HAL_TIM_IC_CaptureCallback>
 80019ba:	e007      	b.n	80019cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 f894 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f8a0 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2210      	movs	r2, #16
 80019da:	4013      	ands	r3, r2
 80019dc:	2b10      	cmp	r3, #16
 80019de:	d125      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2210      	movs	r2, #16
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d11e      	bne.n	8001a2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2211      	movs	r2, #17
 80019f4:	4252      	negs	r2, r2
 80019f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2208      	movs	r2, #8
 80019fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d004      	beq.n	8001a16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f874 	bl	8001afc <HAL_TIM_IC_CaptureCallback>
 8001a14:	e007      	b.n	8001a26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 f867 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 f873 	bl	8001b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2201      	movs	r2, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10f      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	4252      	negs	r2, r2
 8001a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7fe fc97 	bl	8000388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b80      	cmp	r3, #128	; 0x80
 8001a66:	d10f      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b80      	cmp	r3, #128	; 0x80
 8001a74:	d108      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2281      	movs	r2, #129	; 0x81
 8001a7c:	4252      	negs	r2, r2
 8001a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f8d0 	bl	8001c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2240      	movs	r2, #64	; 0x40
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b40      	cmp	r3, #64	; 0x40
 8001a94:	d10f      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b40      	cmp	r3, #64	; 0x40
 8001aa2:	d108      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2241      	movs	r2, #65	; 0x41
 8001aaa:	4252      	negs	r2, r2
 8001aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f833 	bl	8001b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2220      	movs	r2, #32
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d108      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2221      	movs	r2, #33	; 0x21
 8001ad8:	4252      	negs	r2, r2
 8001ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 f89a 	bl	8001c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a2f      	ldr	r2, [pc, #188]	; (8001bfc <TIM_Base_SetConfig+0xd0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <TIM_Base_SetConfig+0x20>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a2e      	ldr	r2, [pc, #184]	; (8001c00 <TIM_Base_SetConfig+0xd4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2270      	movs	r2, #112	; 0x70
 8001b50:	4393      	bics	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <TIM_Base_SetConfig+0xd0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <TIM_Base_SetConfig+0xd4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00f      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <TIM_Base_SetConfig+0xd8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <TIM_Base_SetConfig+0xdc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <TIM_Base_SetConfig+0xe0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_Base_SetConfig+0x62>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <TIM_Base_SetConfig+0xe4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d108      	bne.n	8001ba0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <TIM_Base_SetConfig+0xe8>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <TIM_Base_SetConfig+0xd0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00b      	beq.n	8001be6 <TIM_Base_SetConfig+0xba>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <TIM_Base_SetConfig+0xdc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <TIM_Base_SetConfig+0xba>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <TIM_Base_SetConfig+0xe0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0xba>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <TIM_Base_SetConfig+0xe4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d103      	bne.n	8001bee <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	615a      	str	r2, [r3, #20]
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40002000 	.word	0x40002000
 8001c08:	40014000 	.word	0x40014000
 8001c0c:	40014400 	.word	0x40014400
 8001c10:	40014800 	.word	0x40014800
 8001c14:	fffffcff 	.word	0xfffffcff

08001c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <memset>:
 8001c38:	0003      	movs	r3, r0
 8001c3a:	1882      	adds	r2, r0, r2
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d100      	bne.n	8001c42 <memset+0xa>
 8001c40:	4770      	bx	lr
 8001c42:	7019      	strb	r1, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	e7f9      	b.n	8001c3c <memset+0x4>

08001c48 <_init>:
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4e:	bc08      	pop	{r3}
 8001c50:	469e      	mov	lr, r3
 8001c52:	4770      	bx	lr

08001c54 <_fini>:
 8001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5a:	bc08      	pop	{r3}
 8001c5c:	469e      	mov	lr, r3
 8001c5e:	4770      	bx	lr
