
F070RB_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017cc  080017cc  0002080c  2**0
                  CONTENTS
  4 .ARM          00000000  080017cc  080017cc  0002080c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017cc  080017cc  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000800  080017d4  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000080c  080017e0  0002080c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  080017e0  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d67  00000000  00000000  00020834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dfb  00000000  00000000  0002359b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00024398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  000246f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e958  00000000  00000000  000249c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000046c9  00000000  00000000  00033318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057e49  00000000  00000000  000379e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008f82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a1c  00000000  00000000  0008f880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000080c 	.word	0x2000080c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001784 	.word	0x08001784

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000810 	.word	0x20000810
 8000104:	08001784 	.word	0x08001784

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vF070rb_DeInitAndJump>:
    uint32_t    stack_addr;     // Stack Pointer
    application_t*  func_p;        // Program Counter
} JumpStruct;

static void vF070rb_DeInitAndJump(uint32_t u32FwAddress)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t u32VectorAddress = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t* pu32FwFlashPointer = (uint32_t*)u32FwAddress;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	623b      	str	r3, [r7, #32]
  uint32_t* pu32FwRamPointer = (uint32_t*)RAM_VECTOR_TABLE_BEGIN;
 8000230:	4b40      	ldr	r3, [pc, #256]	; (8000334 <vF070rb_DeInitAndJump+0x114>)
 8000232:	61fb      	str	r3, [r7, #28]
  uint32_t u32FirmwareOffset = u32FwAddress - FLASH_BOOTLOADER_BEGIN;
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4b40      	ldr	r3, [pc, #256]	; (8000338 <vF070rb_DeInitAndJump+0x118>)
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	60bb      	str	r3, [r7, #8]
  uint32_t u32UnpatchedValue = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	61bb      	str	r3, [r7, #24]
  uint32_t u32PatchedValue = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]
  u32UnpatchedValue = u32UnpatchedValue;
  u32PatchedValue = u32PatchedValue;

  // Check if we need to do reset handler relocation. Not 100% accurate because
  // if original binary reset handler gets pushed back beyond "natural" 0x5000 border, this fails
  uint32_t u32UnalteredResetAddress = *(pu32FwFlashPointer + 1);
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	613b      	str	r3, [r7, #16]

  // Cannot figure out right now what corner case could be
  if (u32UnalteredResetAddress < FLASH_FIRMWARES_EARLIEST_BEGIN)
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <vF070rb_DeInitAndJump+0x11c>)
 800024c:	693a      	ldr	r2, [r7, #16]
 800024e:	429a      	cmp	r2, r3
 8000250:	d22c      	bcs.n	80002ac <vF070rb_DeInitAndJump+0x8c>
  {
    // Detected actual firmware, so copy and patch it.

    // Copy vector table first
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 8000252:	e007      	b.n	8000264 <vF070rb_DeInitAndJump+0x44>
    {
      *(pu32FwRamPointer++) = *(pu32FwFlashPointer++);
 8000254:	6a3a      	ldr	r2, [r7, #32]
 8000256:	1d13      	adds	r3, r2, #4
 8000258:	623b      	str	r3, [r7, #32]
 800025a:	69fb      	ldr	r3, [r7, #28]
 800025c:	1d19      	adds	r1, r3, #4
 800025e:	61f9      	str	r1, [r7, #28]
 8000260:	6812      	ldr	r2, [r2, #0]
 8000262:	601a      	str	r2, [r3, #0]
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 8000264:	69fa      	ldr	r2, [r7, #28]
 8000266:	4b36      	ldr	r3, [pc, #216]	; (8000340 <vF070rb_DeInitAndJump+0x120>)
 8000268:	429a      	cmp	r2, r3
 800026a:	d3f3      	bcc.n	8000254 <vF070rb_DeInitAndJump+0x34>
    // We are given  u32FwAddress = 0x8005000;
    // Firmware binary thinks it is in 0x8000000 (which is actually bootloader start address)
    // Offset is 0x8005000 - 0x8000000 eq u32FwAddress - FLASH_BOOTLOADER_BEGIN

    // Patch vector table...
    pu32FwRamPointer = (uint32_t*)RAM_VECTOR_TABLE_BEGIN;
 800026c:	4b31      	ldr	r3, [pc, #196]	; (8000334 <vF070rb_DeInitAndJump+0x114>)
 800026e:	61fb      	str	r3, [r7, #28]
    pu32FwRamPointer++; // .. but omit first address, it points to ram
 8000270:	69fb      	ldr	r3, [r7, #28]
 8000272:	3304      	adds	r3, #4
 8000274:	61fb      	str	r3, [r7, #28]

    // Actual patching loop
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 8000276:	e012      	b.n	800029e <vF070rb_DeInitAndJump+0x7e>
    {
      if (*pu32FwRamPointer != 0)
 8000278:	69fb      	ldr	r3, [r7, #28]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d00b      	beq.n	8000298 <vF070rb_DeInitAndJump+0x78>
      {
        u32UnpatchedValue = *pu32FwRamPointer;
 8000280:	69fb      	ldr	r3, [r7, #28]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	61bb      	str	r3, [r7, #24]
        *pu32FwRamPointer += u32FirmwareOffset;
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	18d2      	adds	r2, r2, r3
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	601a      	str	r2, [r3, #0]
        u32PatchedValue = *pu32FwRamPointer;
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	617b      	str	r3, [r7, #20]
      }
      pu32FwRamPointer++;
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	3304      	adds	r3, #4
 800029c:	61fb      	str	r3, [r7, #28]
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 800029e:	69fa      	ldr	r2, [r7, #28]
 80002a0:	4b27      	ldr	r3, [pc, #156]	; (8000340 <vF070rb_DeInitAndJump+0x120>)
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3e8      	bcc.n	8000278 <vF070rb_DeInitAndJump+0x58>
    }
    // Firmware patches its own got in assembly upon startup

    // And lets hope for the best
    u32VectorAddress = RAM_VECTOR_TABLE_BEGIN;
 80002a6:	4b23      	ldr	r3, [pc, #140]	; (8000334 <vF070rb_DeInitAndJump+0x114>)
 80002a8:	627b      	str	r3, [r7, #36]	; 0x24
 80002aa:	e001      	b.n	80002b0 <vF070rb_DeInitAndJump+0x90>
  }
  else
  {
    u32VectorAddress = u32FwAddress;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // Deinitialization and jump parts from
  // https://github.com/viktorvano/STM32-Bootloader/blob/master/STM32F103C8T6_Bootloader/Core/Inc/bootloader.h
  const JumpStruct* pxJumpVector = (JumpStruct*)u32VectorAddress;
 80002b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b2:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_DeInit(LD2_GPIO_Port, LD2_Pin);
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2120      	movs	r1, #32
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fc56 	bl	8000b6c <HAL_GPIO_DeInit>
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <vF070rb_DeInitAndJump+0x124>)
 80002c2:	695a      	ldr	r2, [r3, #20]
 80002c4:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <vF070rb_DeInitAndJump+0x124>)
 80002c6:	4920      	ldr	r1, [pc, #128]	; (8000348 <vF070rb_DeInitAndJump+0x128>)
 80002c8:	400a      	ands	r2, r1
 80002ca:	615a      	str	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80002cc:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <vF070rb_DeInitAndJump+0x124>)
 80002ce:	695a      	ldr	r2, [r3, #20]
 80002d0:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <vF070rb_DeInitAndJump+0x124>)
 80002d2:	491e      	ldr	r1, [pc, #120]	; (800034c <vF070rb_DeInitAndJump+0x12c>)
 80002d4:	400a      	ands	r2, r1
 80002d6:	615a      	str	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80002d8:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <vF070rb_DeInitAndJump+0x124>)
 80002da:	695a      	ldr	r2, [r3, #20]
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <vF070rb_DeInitAndJump+0x124>)
 80002de:	491c      	ldr	r1, [pc, #112]	; (8000350 <vF070rb_DeInitAndJump+0x130>)
 80002e0:	400a      	ands	r2, r1
 80002e2:	615a      	str	r2, [r3, #20]
  HAL_RCC_DeInit();
 80002e4:	f000 fd4a 	bl	8000d7c <HAL_RCC_DeInit>
  HAL_DeInit();
 80002e8:	f000 f9a6 	bl	8000638 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ec:	b672      	cpsid	i
}
 80002ee:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  // Store firmware offset to r7 (was: r12 but there was some kind of stupid low register requirement)
  asm ("ldr r7, %0;"
 80002f0:	68bf      	ldr	r7, [r7, #8]
      :"=m"(u32FirmwareOffset)
      :
      :);

  // Store firmware actual address to r6 (was: r11 but there was some kind of stupid low register requirement)
  asm ("ldr r6, %0;"
 80002f2:	687e      	ldr	r6, [r7, #4]
      :"=m"(u32FwAddress)
      :
      :);


  SysTick->CTRL = 0;
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <vF070rb_DeInitAndJump+0x134>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <vF070rb_DeInitAndJump+0x134>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <vF070rb_DeInitAndJump+0x134>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]

  // Cortex-M0 has no vector table.
  // SCB->VTOR = u32VectorAddress;
  // But we can remap memory
  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <vF070rb_DeInitAndJump+0x138>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <vF070rb_DeInitAndJump+0x138>)
 800030c:	2103      	movs	r1, #3
 800030e:	438a      	bics	r2, r1
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <vF070rb_DeInitAndJump+0x138>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <vF070rb_DeInitAndJump+0x138>)
 8000318:	2103      	movs	r1, #3
 800031a:	430a      	orrs	r2, r1
 800031c:	601a      	str	r2, [r3, #0]

  // Actual jump
  asm("msr msp, %0; bx %1;" : : "r"(pxJumpVector->stack_addr), "r"(pxJumpVector->func_p));
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	6852      	ldr	r2, [r2, #4]
 8000326:	f383 8808 	msr	MSP, r3
 800032a:	4710      	bx	r2
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b00a      	add	sp, #40	; 0x28
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000000 	.word	0x20000000
 8000338:	08000000 	.word	0x08000000
 800033c:	08005000 	.word	0x08005000
 8000340:	200000c0 	.word	0x200000c0
 8000344:	40021000 	.word	0x40021000
 8000348:	fff7ffff 	.word	0xfff7ffff
 800034c:	fffdffff 	.word	0xfffdffff
 8000350:	fffbffff 	.word	0xfffbffff
 8000354:	e000e010 	.word	0xe000e010
 8000358:	40010000 	.word	0x40010000

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
  uint32_t u32LedCounter = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000366:	f000 f953 	bl	8000610 <HAL_Init>
  SystemClock_Config();
 800036a:	f000 f82b 	bl	80003c4 <SystemClock_Config>
  MX_GPIO_Init();
 800036e:	f000 f875 	bl	800045c <MX_GPIO_Init>

  // Run high frequency for a brief while, then jump
  for (u32LedCounter = 0; u32LedCounter < 0xA0000; u32LedCounter++)
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	e00f      	b.n	8000398 <main+0x3c>
  {
    if ((u32LedCounter % 0x7FFF) == 0)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <main+0x60>)
 800037c:	0018      	movs	r0, r3
 800037e:	f7ff ff49 	bl	8000214 <__aeabi_uidivmod>
 8000382:	1e0b      	subs	r3, r1, #0
 8000384:	d105      	bne.n	8000392 <main+0x36>
    {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000386:	2390      	movs	r3, #144	; 0x90
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	2120      	movs	r1, #32
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fcda 	bl	8000d46 <HAL_GPIO_TogglePin>
  for (u32LedCounter = 0; u32LedCounter < 0xA0000; u32LedCounter++)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3301      	adds	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	23a0      	movs	r3, #160	; 0xa0
 800039c:	031b      	lsls	r3, r3, #12
 800039e:	429a      	cmp	r2, r3
 80003a0:	d3ea      	bcc.n	8000378 <main+0x1c>
    }
  }
  // Leave LED off
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a2:	2390      	movs	r3, #144	; 0x90
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fcae 	bl	8000d0c <HAL_GPIO_WritePin>
  // Deinit and jump
  vF070rb_DeInitAndJump(0x8005000);
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <main+0x64>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f7ff ff34 	bl	8000220 <vF070rb_DeInitAndJump>


  while (1)
 80003b8:	e7fe      	b.n	80003b8 <main+0x5c>
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	00007fff 	.word	0x00007fff
 80003c0:	08005000 	.word	0x08005000

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b091      	sub	sp, #68	; 0x44
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	2410      	movs	r4, #16
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	0018      	movs	r0, r3
 80003d0:	2330      	movs	r3, #48	; 0x30
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f001 f9cd 	bl	8001774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003da:	003b      	movs	r3, r7
 80003dc:	0018      	movs	r0, r3
 80003de:	2310      	movs	r3, #16
 80003e0:	001a      	movs	r2, r3
 80003e2:	2100      	movs	r1, #0
 80003e4:	f001 f9c6 	bl	8001774 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	0021      	movs	r1, r4
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2202      	movs	r2, #2
 80003ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2201      	movs	r2, #1
 80003f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2210      	movs	r2, #16
 80003fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2202      	movs	r2, #2
 8000400:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	0212      	lsls	r2, r2, #8
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0352      	lsls	r2, r2, #13
 8000410:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	187b      	adds	r3, r7, r1
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fd34 	bl	8000e88 <HAL_RCC_OscConfig>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000424:	f000 f884 	bl	8000530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	003b      	movs	r3, r7
 800042a:	2207      	movs	r2, #7
 800042c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042e:	003b      	movs	r3, r7
 8000430:	2202      	movs	r2, #2
 8000432:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	003b      	movs	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043a:	003b      	movs	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000440:	003b      	movs	r3, r7
 8000442:	2101      	movs	r1, #1
 8000444:	0018      	movs	r0, r3
 8000446:	f001 f83d 	bl	80014c4 <HAL_RCC_ClockConfig>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800044e:	f000 f86f 	bl	8000530 <Error_Handler>
  }
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b011      	add	sp, #68	; 0x44
 8000458:	bd90      	pop	{r4, r7, pc}
	...

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b089      	sub	sp, #36	; 0x24
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	240c      	movs	r4, #12
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2314      	movs	r3, #20
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f001 f981 	bl	8001774 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0309      	lsls	r1, r1, #12
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	031b      	lsls	r3, r3, #12
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b25      	ldr	r3, [pc, #148]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <MX_GPIO_Init+0xc8>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	03c9      	lsls	r1, r1, #15
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <MX_GPIO_Init+0xc8>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	03db      	lsls	r3, r3, #15
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_GPIO_Init+0xc8>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <MX_GPIO_Init+0xc8>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0289      	lsls	r1, r1, #10
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_GPIO_Init+0xc8>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	029b      	lsls	r3, r3, #10
 80004c0:	4013      	ands	r3, r2
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004c6:	2390      	movs	r3, #144	; 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2200      	movs	r2, #0
 80004cc:	2120      	movs	r1, #32
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fc1c 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	0192      	lsls	r2, r2, #6
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <MX_GPIO_Init+0xcc>)
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	4a10      	ldr	r2, [pc, #64]	; (800052c <MX_GPIO_Init+0xd0>)
 80004ec:	0019      	movs	r1, r3
 80004ee:	0010      	movs	r0, r2
 80004f0:	f000 f9cc 	bl	800088c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2220      	movs	r2, #32
 80004fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2201      	movs	r2, #1
 8000500:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800050e:	187a      	adds	r2, r7, r1
 8000510:	2390      	movs	r3, #144	; 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f000 f9b8 	bl	800088c <HAL_GPIO_Init>

}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b009      	add	sp, #36	; 0x24
 8000522:	bd90      	pop	{r4, r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	10210000 	.word	0x10210000
 800052c:	48000800 	.word	0x48000800

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	699a      	ldr	r2, [r3, #24]
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	2101      	movs	r1, #1
 800054a:	430a      	orrs	r2, r1
 800054c:	619a      	str	r2, [r3, #24]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	69da      	ldr	r2, [r3, #28]
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	0549      	lsls	r1, r1, #21
 8000564:	430a      	orrs	r2, r1
 8000566:	61da      	str	r2, [r3, #28]
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <HAL_MspInit+0x44>)
 800056a:	69da      	ldr	r2, [r3, #28]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	055b      	lsls	r3, r3, #21
 8000570:	4013      	ands	r3, r2
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b002      	add	sp, #8
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40021000 	.word	0x40021000

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a8:	f000 f8a0 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490e      	ldr	r1, [pc, #56]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0b      	ldr	r4, [pc, #44]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005e6:	f7ff ffe4 	bl	80005b2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005ea:	f001 f89f 	bl	800172c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff feb5 	bl	800035c <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005f8:	20000800 	.word	0x20000800
  ldr r1, =_edata
 80005fc:	2000080c 	.word	0x2000080c
  ldr r2, =_sidata
 8000600:	080017d4 	.word	0x080017d4
  ldr r2, =_sbss
 8000604:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 8000608:	2000082c 	.word	0x2000082c

0800060c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_IRQHandler>
	...

08000610 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <HAL_Init+0x24>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_Init+0x24>)
 800061a:	2110      	movs	r1, #16
 800061c:	430a      	orrs	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f82f 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000626:	f7ff ff89 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_DeInit+0x3c>)
 800063e:	2201      	movs	r2, #1
 8000640:	4252      	negs	r2, r2
 8000642:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_DeInit+0x3c>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_DeInit+0x3c>)
 800064c:	2201      	movs	r2, #1
 800064e:	4252      	negs	r2, r2
 8000650:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_DeInit+0x3c>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_DeInit+0x3c>)
 800065a:	2201      	movs	r2, #1
 800065c:	4252      	negs	r2, r2
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_DeInit+0x3c>)
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000666:	f000 f807 	bl	8000678 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_InitTick+0x5c>)
 800068e:	681c      	ldr	r4, [r3, #0]
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_InitTick+0x60>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	0019      	movs	r1, r3
 8000696:	23fa      	movs	r3, #250	; 0xfa
 8000698:	0098      	lsls	r0, r3, #2
 800069a:	f7ff fd35 	bl	8000108 <__udivsi3>
 800069e:	0003      	movs	r3, r0
 80006a0:	0019      	movs	r1, r3
 80006a2:	0020      	movs	r0, r4
 80006a4:	f7ff fd30 	bl	8000108 <__udivsi3>
 80006a8:	0003      	movs	r3, r0
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 f8e1 	bl	8000872 <HAL_SYSTICK_Config>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e00f      	b.n	80006d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d80b      	bhi.n	80006d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	2301      	movs	r3, #1
 80006c2:	425b      	negs	r3, r3
 80006c4:	2200      	movs	r2, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 f8be 	bl	8000848 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_InitTick+0x64>)
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b003      	add	sp, #12
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	20000800 	.word	0x20000800
 80006e4:	20000808 	.word	0x20000808
 80006e8:	20000804 	.word	0x20000804

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	001a      	movs	r2, r3
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	18d2      	adds	r2, r2, r3
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <HAL_IncTick+0x20>)
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000808 	.word	0x20000808
 800070c:	20000828 	.word	0x20000828

08000710 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <HAL_GetTick+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000828 	.word	0x20000828

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	0002      	movs	r2, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b7f      	cmp	r3, #127	; 0x7f
 8000738:	d828      	bhi.n	800078c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073a:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <__NVIC_SetPriority+0xd4>)
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b25b      	sxtb	r3, r3
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	33c0      	adds	r3, #192	; 0xc0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	589b      	ldr	r3, [r3, r2]
 800074a:	1dfa      	adds	r2, r7, #7
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	0011      	movs	r1, r2
 8000750:	2203      	movs	r2, #3
 8000752:	400a      	ands	r2, r1
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	4091      	lsls	r1, r2
 800075a:	000a      	movs	r2, r1
 800075c:	43d2      	mvns	r2, r2
 800075e:	401a      	ands	r2, r3
 8000760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	401a      	ands	r2, r3
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	0018      	movs	r0, r3
 8000770:	2303      	movs	r3, #3
 8000772:	4003      	ands	r3, r0
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000778:	481f      	ldr	r0, [pc, #124]	; (80007f8 <__NVIC_SetPriority+0xd4>)
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b25b      	sxtb	r3, r3
 8000780:	089b      	lsrs	r3, r3, #2
 8000782:	430a      	orrs	r2, r1
 8000784:	33c0      	adds	r3, #192	; 0xc0
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078a:	e031      	b.n	80007f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <__NVIC_SetPriority+0xd8>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	0019      	movs	r1, r3
 8000794:	230f      	movs	r3, #15
 8000796:	400b      	ands	r3, r1
 8000798:	3b08      	subs	r3, #8
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	3306      	adds	r3, #6
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	18d3      	adds	r3, r2, r3
 80007a2:	3304      	adds	r3, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1dfa      	adds	r2, r7, #7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	0011      	movs	r1, r2
 80007ac:	2203      	movs	r2, #3
 80007ae:	400a      	ands	r2, r1
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	21ff      	movs	r1, #255	; 0xff
 80007b4:	4091      	lsls	r1, r2
 80007b6:	000a      	movs	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	401a      	ands	r2, r3
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0018      	movs	r0, r3
 80007cc:	2303      	movs	r3, #3
 80007ce:	4003      	ands	r3, r0
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <__NVIC_SetPriority+0xd8>)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	001c      	movs	r4, r3
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	3b08      	subs	r3, #8
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	430a      	orrs	r2, r1
 80007e6:	3306      	adds	r3, #6
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	18c3      	adds	r3, r0, r3
 80007ec:	3304      	adds	r3, #4
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	1e5a      	subs	r2, r3, #1
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	045b      	lsls	r3, r3, #17
 8000810:	429a      	cmp	r2, r3
 8000812:	d301      	bcc.n	8000818 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000814:	2301      	movs	r3, #1
 8000816:	e010      	b.n	800083a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <SysTick_Config+0x44>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	3a01      	subs	r2, #1
 800081e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000820:	2301      	movs	r3, #1
 8000822:	425b      	negs	r3, r3
 8000824:	2103      	movs	r1, #3
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff ff7c 	bl	8000724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x44>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	210f      	movs	r1, #15
 8000854:	187b      	adds	r3, r7, r1
 8000856:	1c02      	adds	r2, r0, #0
 8000858:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b25b      	sxtb	r3, r3
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff5d 	bl	8000724 <__NVIC_SetPriority>
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff ffbf 	bl	8000800 <SysTick_Config>
 8000882:	0003      	movs	r3, r0
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089a:	e14f      	b.n	8000b3c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4091      	lsls	r1, r2
 80008a6:	000a      	movs	r2, r1
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d100      	bne.n	80008b4 <HAL_GPIO_Init+0x28>
 80008b2:	e140      	b.n	8000b36 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d00b      	beq.n	80008d4 <HAL_GPIO_Init+0x48>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d007      	beq.n	80008d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c8:	2b11      	cmp	r3, #17
 80008ca:	d003      	beq.n	80008d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b12      	cmp	r3, #18
 80008d2:	d130      	bne.n	8000936 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	409a      	lsls	r2, r3
 80008e2:	0013      	movs	r3, r2
 80008e4:	43da      	mvns	r2, r3
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	409a      	lsls	r2, r3
 80008f6:	0013      	movs	r3, r2
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090a:	2201      	movs	r2, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	43da      	mvns	r2, r3
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	091b      	lsrs	r3, r3, #4
 8000920:	2201      	movs	r2, #1
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2203      	movs	r2, #3
 8000942:	409a      	lsls	r2, r3
 8000944:	0013      	movs	r3, r2
 8000946:	43da      	mvns	r2, r3
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	409a      	lsls	r2, r3
 8000958:	0013      	movs	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d003      	beq.n	8000976 <HAL_GPIO_Init+0xea>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b12      	cmp	r3, #18
 8000974:	d123      	bne.n	80009be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	08da      	lsrs	r2, r3, #3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3208      	adds	r2, #8
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	58d3      	ldr	r3, [r2, r3]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	2207      	movs	r2, #7
 8000988:	4013      	ands	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	220f      	movs	r2, #15
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	43da      	mvns	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2107      	movs	r1, #7
 80009a2:	400b      	ands	r3, r1
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	08da      	lsrs	r2, r3, #3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3208      	adds	r2, #8
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	6939      	ldr	r1, [r7, #16]
 80009bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2203      	movs	r2, #3
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	43da      	mvns	r2, r3
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2203      	movs	r2, #3
 80009dc:	401a      	ands	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	055b      	lsls	r3, r3, #21
 80009fa:	4013      	ands	r3, r2
 80009fc:	d100      	bne.n	8000a00 <HAL_GPIO_Init+0x174>
 80009fe:	e09a      	b.n	8000b36 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a00:	4b54      	ldr	r3, [pc, #336]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a02:	699a      	ldr	r2, [r3, #24]
 8000a04:	4b53      	ldr	r3, [pc, #332]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	619a      	str	r2, [r3, #24]
 8000a0c:	4b51      	ldr	r3, [pc, #324]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4013      	ands	r3, r2
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a18:	4a4f      	ldr	r2, [pc, #316]	; (8000b58 <HAL_GPIO_Init+0x2cc>)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3302      	adds	r3, #2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	589b      	ldr	r3, [r3, r2]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2203      	movs	r2, #3
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	220f      	movs	r2, #15
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	43da      	mvns	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	2390      	movs	r3, #144	; 0x90
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0x1e2>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a44      	ldr	r2, [pc, #272]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d00d      	beq.n	8000a6a <HAL_GPIO_Init+0x1de>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <HAL_GPIO_Init+0x2d4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d007      	beq.n	8000a66 <HAL_GPIO_Init+0x1da>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a42      	ldr	r2, [pc, #264]	; (8000b64 <HAL_GPIO_Init+0x2d8>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_GPIO_Init+0x1d6>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e006      	b.n	8000a70 <HAL_GPIO_Init+0x1e4>
 8000a62:	2305      	movs	r3, #5
 8000a64:	e004      	b.n	8000a70 <HAL_GPIO_Init+0x1e4>
 8000a66:	2302      	movs	r3, #2
 8000a68:	e002      	b.n	8000a70 <HAL_GPIO_Init+0x1e4>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <HAL_GPIO_Init+0x1e4>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	2103      	movs	r1, #3
 8000a74:	400a      	ands	r2, r1
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	4093      	lsls	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a80:	4935      	ldr	r1, [pc, #212]	; (8000b58 <HAL_GPIO_Init+0x2cc>)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	089b      	lsrs	r3, r3, #2
 8000a86:	3302      	adds	r3, #2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43da      	mvns	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	029b      	lsls	r3, r3, #10
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	035b      	lsls	r3, r3, #13
 8000afa:	4013      	ands	r3, r2
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43da      	mvns	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	039b      	lsls	r3, r3, #14
 8000b24:	4013      	ands	r3, r2
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	40da      	lsrs	r2, r3
 8000b44:	1e13      	subs	r3, r2, #0
 8000b46:	d000      	beq.n	8000b4a <HAL_GPIO_Init+0x2be>
 8000b48:	e6a8      	b.n	800089c <HAL_GPIO_Init+0x10>
  } 
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b006      	add	sp, #24
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48000c00 	.word	0x48000c00
 8000b68:	40010400 	.word	0x40010400

08000b6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000b7a:	e0b1      	b.n	8000ce0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	409a      	lsls	r2, r3
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_DeInit+0x24>
 8000b8e:	e0a4      	b.n	8000cda <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000b90:	4a59      	ldr	r2, [pc, #356]	; (8000cf8 <HAL_GPIO_DeInit+0x18c>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	589b      	ldr	r3, [r3, r2]
 8000b9c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	2390      	movs	r3, #144	; 0x90
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_DeInit+0x76>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a4f      	ldr	r2, [pc, #316]	; (8000cfc <HAL_GPIO_DeInit+0x190>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00d      	beq.n	8000bde <HAL_GPIO_DeInit+0x72>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a4e      	ldr	r2, [pc, #312]	; (8000d00 <HAL_GPIO_DeInit+0x194>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d007      	beq.n	8000bda <HAL_GPIO_DeInit+0x6e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4d      	ldr	r2, [pc, #308]	; (8000d04 <HAL_GPIO_DeInit+0x198>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_GPIO_DeInit+0x6a>
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_DeInit+0x78>
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e004      	b.n	8000be4 <HAL_GPIO_DeInit+0x78>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_DeInit+0x78>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_DeInit+0x78>
 8000be2:	2300      	movs	r3, #0
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	2103      	movs	r1, #3
 8000be8:	400a      	ands	r2, r1
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	4093      	lsls	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d132      	bne.n	8000c5a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	4b42      	ldr	r3, [pc, #264]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000bfe:	400a      	ands	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000c02:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	43d9      	mvns	r1, r3
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000c10:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	4b3b      	ldr	r3, [pc, #236]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	43d9      	mvns	r1, r3
 8000c26:	4b38      	ldr	r3, [pc, #224]	; (8000d08 <HAL_GPIO_DeInit+0x19c>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	2203      	movs	r2, #3
 8000c30:	4013      	ands	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000c3c:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <HAL_GPIO_DeInit+0x18c>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	589a      	ldr	r2, [r3, r2]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	482a      	ldr	r0, [pc, #168]	; (8000cf8 <HAL_GPIO_DeInit+0x18c>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	400a      	ands	r2, r1
 8000c54:	3302      	adds	r3, #2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	0052      	lsls	r2, r2, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	58d3      	ldr	r3, [r2, r3]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	2107      	movs	r1, #7
 8000c80:	400a      	ands	r2, r1
 8000c82:	0092      	lsls	r2, r2, #2
 8000c84:	210f      	movs	r1, #15
 8000c86:	4091      	lsls	r1, r2
 8000c88:	000a      	movs	r2, r1
 8000c8a:	43d1      	mvns	r1, r2
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	08d2      	lsrs	r2, r2, #3
 8000c90:	4019      	ands	r1, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	401a      	ands	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	0052      	lsls	r2, r2, #1
 8000ccc:	2103      	movs	r1, #3
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	43d2      	mvns	r2, r2
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]

    }

    position++;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	40da      	lsrs	r2, r3
 8000ce6:	1e13      	subs	r3, r2, #0
 8000ce8:	d000      	beq.n	8000cec <HAL_GPIO_DeInit+0x180>
 8000cea:	e747      	b.n	8000b7c <HAL_GPIO_DeInit+0x10>
  }
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b006      	add	sp, #24
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000800 	.word	0x48000800
 8000d04:	48000c00 	.word	0x48000c00
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	0008      	movs	r0, r1
 8000d16:	0011      	movs	r1, r2
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	1c02      	adds	r2, r0, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
 8000d1e:	1c7b      	adds	r3, r7, #1
 8000d20:	1c0a      	adds	r2, r1, #0
 8000d22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d24:	1c7b      	adds	r3, r7, #1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d004      	beq.n	8000d36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	881a      	ldrh	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d34:	e003      	b.n	8000d3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d36:	1cbb      	adds	r3, r7, #2
 8000d38:	881a      	ldrh	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	000a      	movs	r2, r1
 8000d50:	1cbb      	adds	r3, r7, #2
 8000d52:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d5a:	1cbb      	adds	r3, r7, #2
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	4013      	ands	r3, r2
 8000d62:	041a      	lsls	r2, r3, #16
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	1cb9      	adds	r1, r7, #2
 8000d6a:	8809      	ldrh	r1, [r1, #0]
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	619a      	str	r2, [r3, #24]
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b004      	add	sp, #16
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000d82:	f7ff fcc5 	bl	8000710 <HAL_GetTick>
 8000d86:	0003      	movs	r3, r0
 8000d88:	607b      	str	r3, [r7, #4]
  
  /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8000d8a:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000d90:	2181      	movs	r1, #129	; 0x81
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_DeInit+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fcba 	bl	8000710 <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_DeInit+0x2e>
    {
      return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e05a      	b.n	8000e60 <HAL_RCC_DeInit+0xe4>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2202      	movs	r2, #2
 8000db0:	4013      	ands	r3, r2
 8000db2:	d0f1      	beq.n	8000d98 <HAL_RCC_DeInit+0x1c>
    }
  }

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000dba:	492c      	ldr	r1, [pc, #176]	; (8000e6c <HAL_RCC_DeInit+0xf0>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	605a      	str	r2, [r3, #4]

  /* Wait till HSI as SYSCLK status is enabled */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000dc0:	e009      	b.n	8000dd6 <HAL_RCC_DeInit+0x5a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc2:	f7ff fca5 	bl	8000710 <HAL_GetTick>
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <HAL_RCC_DeInit+0xf4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_DeInit+0x5a>
    {
      return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e044      	b.n	8000e60 <HAL_RCC_DeInit+0xe4>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	220c      	movs	r2, #12
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d1f0      	bne.n	8000dc2 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_RCC_DeInit+0xf8>)
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_RCC_DeInit+0xfc>)
 8000de4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_RCC_DeInit+0x100>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fc4a 	bl	8000684 <HAL_InitTick>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_RCC_DeInit+0x7c>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e033      	b.n	8000e60 <HAL_RCC_DeInit+0xe4>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000dfe:	4920      	ldr	r1, [pc, #128]	; (8000e80 <HAL_RCC_DeInit+0x104>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e0a:	491e      	ldr	r1, [pc, #120]	; (8000e84 <HAL_RCC_DeInit+0x108>)
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Get start tick */
  tickstart = HAL_GetTick();
 8000e10:	f7ff fc7e 	bl	8000710 <HAL_GetTick>
 8000e14:	0003      	movs	r3, r0
 8000e16:	607b      	str	r3, [r7, #4]
  
  /* Wait till PLLRDY is cleared */
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_DeInit+0xb0>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e1a:	f7ff fc79 	bl	8000710 <HAL_GetTick>
 8000e1e:	0002      	movs	r2, r0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_DeInit+0xb0>
    {
      return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e019      	b.n	8000e60 <HAL_RCC_DeInit+0xe4>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	049b      	lsls	r3, r3, #18
 8000e34:	4013      	ands	r3, r2
 8000e36:	d1f0      	bne.n	8000e1a <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]

  /* Clear all reset flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_RCC_DeInit+0xec>)
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	0449      	lsls	r1, r1, #17
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	f0fff80c 	.word	0xf0fff80c
 8000e70:	00001388 	.word	0x00001388
 8000e74:	20000800 	.word	0x20000800
 8000e78:	007a1200 	.word	0x007a1200
 8000e7c:	20000804 	.word	0x20000804
 8000e80:	fef6ffff 	.word	0xfef6ffff
 8000e84:	fffbffff 	.word	0xfffbffff

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e305      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x1e>
 8000ea4:	e08d      	b.n	8000fc2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ea6:	4bc5      	ldr	r3, [pc, #788]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	220c      	movs	r2, #12
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d00e      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb2:	4bc2      	ldr	r3, [pc, #776]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d116      	bne.n	8000eec <HAL_RCC_OscConfig+0x64>
 8000ebe:	4bbf      	ldr	r3, [pc, #764]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	23c0      	movs	r3, #192	; 0xc0
 8000ec4:	025b      	lsls	r3, r3, #9
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d10d      	bne.n	8000eec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed0:	4bba      	ldr	r3, [pc, #744]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	029b      	lsls	r3, r3, #10
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d100      	bne.n	8000ede <HAL_RCC_OscConfig+0x56>
 8000edc:	e070      	b.n	8000fc0 <HAL_RCC_OscConfig+0x138>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d000      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x60>
 8000ee6:	e06b      	b.n	8000fc0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e2dc      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d107      	bne.n	8000f04 <HAL_RCC_OscConfig+0x7c>
 8000ef4:	4bb1      	ldr	r3, [pc, #708]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4bb0      	ldr	r3, [pc, #704]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	430a      	orrs	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e02f      	b.n	8000f64 <HAL_RCC_OscConfig+0xdc>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x9e>
 8000f0c:	4bab      	ldr	r3, [pc, #684]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4baa      	ldr	r3, [pc, #680]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f12:	49ab      	ldr	r1, [pc, #684]	; (80011c0 <HAL_RCC_OscConfig+0x338>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	4ba8      	ldr	r3, [pc, #672]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4ba7      	ldr	r3, [pc, #668]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f1e:	49a9      	ldr	r1, [pc, #676]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f20:	400a      	ands	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e01e      	b.n	8000f64 <HAL_RCC_OscConfig+0xdc>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d10e      	bne.n	8000f4c <HAL_RCC_OscConfig+0xc4>
 8000f2e:	4ba3      	ldr	r3, [pc, #652]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4ba2      	ldr	r3, [pc, #648]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	02c9      	lsls	r1, r1, #11
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	4b9f      	ldr	r3, [pc, #636]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b9e      	ldr	r3, [pc, #632]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0xdc>
 8000f4c:	4b9b      	ldr	r3, [pc, #620]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b9a      	ldr	r3, [pc, #616]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f52:	499b      	ldr	r1, [pc, #620]	; (80011c0 <HAL_RCC_OscConfig+0x338>)
 8000f54:	400a      	ands	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	4b98      	ldr	r3, [pc, #608]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b97      	ldr	r3, [pc, #604]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f5e:	4999      	ldr	r1, [pc, #612]	; (80011c4 <HAL_RCC_OscConfig+0x33c>)
 8000f60:	400a      	ands	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d014      	beq.n	8000f96 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fbd0 	bl	8000710 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f76:	f7ff fbcb 	bl	8000710 <HAL_GetTick>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b64      	cmp	r3, #100	; 0x64
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e28e      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f88:	4b8c      	ldr	r3, [pc, #560]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	4013      	ands	r3, r2
 8000f92:	d0f0      	beq.n	8000f76 <HAL_RCC_OscConfig+0xee>
 8000f94:	e015      	b.n	8000fc2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fbbb 	bl	8000710 <HAL_GetTick>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fbb6 	bl	8000710 <HAL_GetTick>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e279      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	4b82      	ldr	r3, [pc, #520]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	029b      	lsls	r3, r3, #10
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x118>
 8000fbe:	e000      	b.n	8000fc2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d100      	bne.n	8000fce <HAL_RCC_OscConfig+0x146>
 8000fcc:	e06c      	b.n	80010a8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fce:	4b7b      	ldr	r3, [pc, #492]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d00e      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd8:	4b78      	ldr	r3, [pc, #480]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	220c      	movs	r2, #12
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d11f      	bne.n	8001024 <HAL_RCC_OscConfig+0x19c>
 8000fe4:	4b75      	ldr	r3, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	025b      	lsls	r3, r3, #9
 8000fec:	401a      	ands	r2, r3
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b71      	ldr	r3, [pc, #452]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d005      	beq.n	800100c <HAL_RCC_OscConfig+0x184>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d001      	beq.n	800100c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e24c      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	22f8      	movs	r2, #248	; 0xf8
 8001012:	4393      	bics	r3, r2
 8001014:	0019      	movs	r1, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	00da      	lsls	r2, r3, #3
 800101c:	4b67      	ldr	r3, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e041      	b.n	80010a8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d024      	beq.n	8001076 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b63      	ldr	r3, [pc, #396]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b62      	ldr	r3, [pc, #392]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001032:	2101      	movs	r1, #1
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fb6a 	bl	8000710 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fb65 	bl	8000710 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e228      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	4b59      	ldr	r3, [pc, #356]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2202      	movs	r2, #2
 800105a:	4013      	ands	r3, r2
 800105c:	d0f1      	beq.n	8001042 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105e:	4b57      	ldr	r3, [pc, #348]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	22f8      	movs	r2, #248	; 0xf8
 8001064:	4393      	bics	r3, r2
 8001066:	0019      	movs	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	00da      	lsls	r2, r3, #3
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001070:	430a      	orrs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e018      	b.n	80010a8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fb45 	bl	8000710 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fb40 	bl	8000710 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e203      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d1f1      	bne.n	800108c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2208      	movs	r2, #8
 80010ae:	4013      	ands	r3, r2
 80010b0:	d036      	beq.n	8001120 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d019      	beq.n	80010ee <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ba:	4b40      	ldr	r3, [pc, #256]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80010bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	430a      	orrs	r2, r1
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fb23 	bl	8000710 <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fb1e 	bl	8000710 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e1e1      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	2202      	movs	r2, #2
 80010e8:	4013      	ands	r3, r2
 80010ea:	d0f1      	beq.n	80010d0 <HAL_RCC_OscConfig+0x248>
 80010ec:	e018      	b.n	8001120 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80010f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	438a      	bics	r2, r1
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fb09 	bl	8000710 <HAL_GetTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fb04 	bl	8000710 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e1c7      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	2202      	movs	r2, #2
 800111c:	4013      	ands	r3, r2
 800111e:	d1f1      	bne.n	8001104 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2204      	movs	r2, #4
 8001126:	4013      	ands	r3, r2
 8001128:	d100      	bne.n	800112c <HAL_RCC_OscConfig+0x2a4>
 800112a:	e0b5      	b.n	8001298 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112c:	201f      	movs	r0, #31
 800112e:	183b      	adds	r3, r7, r0
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001136:	69da      	ldr	r2, [r3, #28]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	055b      	lsls	r3, r3, #21
 800113c:	4013      	ands	r3, r2
 800113e:	d110      	bne.n	8001162 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001142:	69da      	ldr	r2, [r3, #28]
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0549      	lsls	r1, r1, #21
 800114a:	430a      	orrs	r2, r1
 800114c:	61da      	str	r2, [r3, #28]
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 8001150:	69da      	ldr	r2, [r3, #28]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	055b      	lsls	r3, r3, #21
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800115c:	183b      	adds	r3, r7, r0
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_OscConfig+0x340>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4013      	ands	r3, r2
 800116c:	d11a      	bne.n	80011a4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_RCC_OscConfig+0x340>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_RCC_OscConfig+0x340>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0049      	lsls	r1, r1, #1
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117c:	f7ff fac8 	bl	8000710 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001186:	f7ff fac3 	bl	8000710 <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e186      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_OscConfig+0x340>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d10f      	bne.n	80011cc <HAL_RCC_OscConfig+0x344>
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80011ae:	6a1a      	ldr	r2, [r3, #32]
 80011b0:	4b02      	ldr	r3, [pc, #8]	; (80011bc <HAL_RCC_OscConfig+0x334>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	430a      	orrs	r2, r1
 80011b6:	621a      	str	r2, [r3, #32]
 80011b8:	e036      	b.n	8001228 <HAL_RCC_OscConfig+0x3a0>
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40021000 	.word	0x40021000
 80011c0:	fffeffff 	.word	0xfffeffff
 80011c4:	fffbffff 	.word	0xfffbffff
 80011c8:	40007000 	.word	0x40007000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x366>
 80011d4:	4bb6      	ldr	r3, [pc, #728]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	4bb5      	ldr	r3, [pc, #724]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80011da:	2101      	movs	r1, #1
 80011dc:	438a      	bics	r2, r1
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	4bb3      	ldr	r3, [pc, #716]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	4bb2      	ldr	r3, [pc, #712]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	438a      	bics	r2, r1
 80011ea:	621a      	str	r2, [r3, #32]
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x3a0>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x388>
 80011f6:	4bae      	ldr	r3, [pc, #696]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	4bad      	ldr	r3, [pc, #692]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80011fc:	2104      	movs	r1, #4
 80011fe:	430a      	orrs	r2, r1
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	4bab      	ldr	r3, [pc, #684]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001204:	6a1a      	ldr	r2, [r3, #32]
 8001206:	4baa      	ldr	r3, [pc, #680]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	621a      	str	r2, [r3, #32]
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0x3a0>
 8001210:	4ba7      	ldr	r3, [pc, #668]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	4ba6      	ldr	r3, [pc, #664]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001216:	2101      	movs	r1, #1
 8001218:	438a      	bics	r2, r1
 800121a:	621a      	str	r2, [r3, #32]
 800121c:	4ba4      	ldr	r3, [pc, #656]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800121e:	6a1a      	ldr	r2, [r3, #32]
 8001220:	4ba3      	ldr	r3, [pc, #652]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001222:	2104      	movs	r1, #4
 8001224:	438a      	bics	r2, r1
 8001226:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d014      	beq.n	800125a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fa6e 	bl	8000710 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	e009      	b.n	800124e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fa69 	bl	8000710 <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	4a9b      	ldr	r2, [pc, #620]	; (80014b4 <HAL_RCC_OscConfig+0x62c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e12b      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124e:	4b98      	ldr	r3, [pc, #608]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	2202      	movs	r2, #2
 8001254:	4013      	ands	r3, r2
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x3b2>
 8001258:	e013      	b.n	8001282 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fa59 	bl	8000710 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001262:	e009      	b.n	8001278 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff fa54 	bl	8000710 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a91      	ldr	r2, [pc, #580]	; (80014b4 <HAL_RCC_OscConfig+0x62c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e116      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001278:	4b8d      	ldr	r3, [pc, #564]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	2202      	movs	r2, #2
 800127e:	4013      	ands	r3, r2
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001282:	231f      	movs	r3, #31
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	4b87      	ldr	r3, [pc, #540]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001292:	4989      	ldr	r1, [pc, #548]	; (80014b8 <HAL_RCC_OscConfig+0x630>)
 8001294:	400a      	ands	r2, r1
 8001296:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2210      	movs	r2, #16
 800129e:	4013      	ands	r3, r2
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d12a      	bne.n	8001300 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012aa:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80012ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ae:	4b80      	ldr	r3, [pc, #512]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80012b0:	2104      	movs	r1, #4
 80012b2:	430a      	orrs	r2, r1
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012b6:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80012b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ba:	4b7d      	ldr	r3, [pc, #500]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80012bc:	2101      	movs	r1, #1
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fa25 	bl	8000710 <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012cc:	f7ff fa20 	bl	8000710 <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0e3      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012de:	4b74      	ldr	r3, [pc, #464]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80012e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e2:	2202      	movs	r2, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f1      	beq.n	80012cc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012e8:	4b71      	ldr	r3, [pc, #452]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	22f8      	movs	r2, #248	; 0xf8
 80012ee:	4393      	bics	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	00da      	lsls	r2, r3, #3
 80012f8:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
 80012fe:	e034      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	3305      	adds	r3, #5
 8001306:	d111      	bne.n	800132c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800130a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130c:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800130e:	2104      	movs	r1, #4
 8001310:	438a      	bics	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001314:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	22f8      	movs	r2, #248	; 0xf8
 800131a:	4393      	bics	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	00da      	lsls	r2, r3, #3
 8001324:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
 800132a:	e01e      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800132c:	4b60      	ldr	r3, [pc, #384]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001330:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001332:	2104      	movs	r1, #4
 8001334:	430a      	orrs	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001338:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800133a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133c:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff f9e4 	bl	8000710 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800134e:	f7ff f9df 	bl	8000710 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e0a2      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d1f1      	bne.n	800134e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <HAL_RCC_OscConfig+0x4ec>
 8001372:	e097      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001374:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	220c      	movs	r2, #12
 800137a:	4013      	ands	r3, r2
 800137c:	2b08      	cmp	r3, #8
 800137e:	d100      	bne.n	8001382 <HAL_RCC_OscConfig+0x4fa>
 8001380:	e06b      	b.n	800145a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d14c      	bne.n	8001424 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001390:	494a      	ldr	r1, [pc, #296]	; (80014bc <HAL_RCC_OscConfig+0x634>)
 8001392:	400a      	ands	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff f9bb 	bl	8000710 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff f9b6 	bl	8000710 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e079      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	049b      	lsls	r3, r3, #18
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	220f      	movs	r2, #15
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013cc:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80013ce:	430a      	orrs	r2, r1
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <HAL_RCC_OscConfig+0x638>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	431a      	orrs	r2, r3
 80013e6:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0449      	lsls	r1, r1, #17
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff f989 	bl	8000710 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff f984 	bl	8000710 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e047      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	049b      	lsls	r3, r3, #18
 800141e:	4013      	ands	r3, r2
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x57c>
 8001422:	e03f      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800142a:	4924      	ldr	r1, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x634>)
 800142c:	400a      	ands	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff f96e 	bl	8000710 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff f969 	bl	8000710 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e02c      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	049b      	lsls	r3, r3, #18
 8001454:	4013      	ands	r3, r2
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x5b2>
 8001458:	e024      	b.n	80014a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e01f      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x628>)
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	23c0      	movs	r3, #192	; 0xc0
 8001476:	025b      	lsls	r3, r3, #9
 8001478:	401a      	ands	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	429a      	cmp	r2, r3
 8001480:	d10e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	220f      	movs	r2, #15
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d107      	bne.n	80014a0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	23f0      	movs	r3, #240	; 0xf0
 8001494:	039b      	lsls	r3, r3, #14
 8001496:	401a      	ands	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b008      	add	sp, #32
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	40021000 	.word	0x40021000
 80014b4:	00001388 	.word	0x00001388
 80014b8:	efffffff 	.word	0xefffffff
 80014bc:	feffffff 	.word	0xfeffffff
 80014c0:	ffc27fff 	.word	0xffc27fff

080014c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0b3      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d911      	bls.n	800150a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b55      	ldr	r3, [pc, #340]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e09a      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d015      	beq.n	8001540 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2204      	movs	r2, #4
 800151a:	4013      	ands	r3, r2
 800151c:	d006      	beq.n	800152c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 8001524:	21e0      	movs	r1, #224	; 0xe0
 8001526:	00c9      	lsls	r1, r1, #3
 8001528:	430a      	orrs	r2, r1
 800152a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152c:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	22f0      	movs	r2, #240	; 0xf0
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	d040      	beq.n	80015cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	029b      	lsls	r3, r3, #10
 800155a:	4013      	ands	r3, r2
 800155c:	d114      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06e      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156a:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d108      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e062      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e05b      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 8001598:	430a      	orrs	r2, r1
 800159a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7ff f8b8 	bl	8000710 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a4:	e009      	b.n	80015ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a6:	f7ff f8b3 	bl	8000710 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a27      	ldr	r2, [pc, #156]	; (8001650 <HAL_RCC_ClockConfig+0x18c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e042      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	220c      	movs	r2, #12
 80015c0:	401a      	ands	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d1ec      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d211      	bcs.n	80015fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	4393      	bics	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e020      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2204      	movs	r2, #4
 8001604:	4013      	ands	r3, r2
 8001606:	d009      	beq.n	800161c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_RCC_ClockConfig+0x190>)
 800160e:	4013      	ands	r3, r2
 8001610:	0019      	movs	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800161c:	f000 f820 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 8001620:	0001      	movs	r1, r0
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_RCC_ClockConfig+0x188>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	220f      	movs	r2, #15
 800162a:	4013      	ands	r3, r2
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_RCC_ClockConfig+0x194>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	000a      	movs	r2, r1
 8001632:	40da      	lsrs	r2, r3
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x198>)
 8001636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff f823 	bl	8000684 <HAL_InitTick>
  
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	0018      	movs	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	b004      	add	sp, #16
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40022000 	.word	0x40022000
 800164c:	40021000 	.word	0x40021000
 8001650:	00001388 	.word	0x00001388
 8001654:	fffff8ff 	.word	0xfffff8ff
 8001658:	080017bc 	.word	0x080017bc
 800165c:	20000800 	.word	0x20000800

08001660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b08f      	sub	sp, #60	; 0x3c
 8001664:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001666:	2314      	movs	r3, #20
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	4a2c      	ldr	r2, [pc, #176]	; (800171c <HAL_RCC_GetSysClockFreq+0xbc>)
 800166c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800166e:	c313      	stmia	r3!, {r0, r1, r4}
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001678:	ca13      	ldmia	r2!, {r0, r1, r4}
 800167a:	c313      	stmia	r3!, {r0, r1, r4}
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	220c      	movs	r2, #12
 800169e:	4013      	ands	r3, r2
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d002      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x4a>
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d003      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x50>
 80016a8:	e02f      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016ae:	e02f      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	0c9b      	lsrs	r3, r3, #18
 80016b4:	220f      	movs	r2, #15
 80016b6:	4013      	ands	r3, r2
 80016b8:	2214      	movs	r2, #20
 80016ba:	18ba      	adds	r2, r7, r2
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	220f      	movs	r2, #15
 80016c6:	4013      	ands	r3, r2
 80016c8:	1d3a      	adds	r2, r7, #4
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d0:	23c0      	movs	r3, #192	; 0xc0
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	401a      	ands	r2, r3
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	025b      	lsls	r3, r3, #9
 80016da:	429a      	cmp	r2, r3
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016e0:	4811      	ldr	r0, [pc, #68]	; (8001728 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016e2:	f7fe fd11 	bl	8000108 <__udivsi3>
 80016e6:	0003      	movs	r3, r0
 80016e8:	001a      	movs	r2, r3
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	4353      	muls	r3, r2
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
 80016f0:	e008      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016f6:	f7fe fd07 	bl	8000108 <__udivsi3>
 80016fa:	0003      	movs	r3, r0
 80016fc:	001a      	movs	r2, r3
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	4353      	muls	r3, r2
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001708:	e002      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_RCC_GetSysClockFreq+0xc8>)
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800170e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b00f      	add	sp, #60	; 0x3c
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	0800179c 	.word	0x0800179c
 8001720:	080017ac 	.word	0x080017ac
 8001724:	40021000 	.word	0x40021000
 8001728:	007a1200 	.word	0x007a1200

0800172c <__libc_init_array>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	2600      	movs	r6, #0
 8001730:	4d0c      	ldr	r5, [pc, #48]	; (8001764 <__libc_init_array+0x38>)
 8001732:	4c0d      	ldr	r4, [pc, #52]	; (8001768 <__libc_init_array+0x3c>)
 8001734:	1b64      	subs	r4, r4, r5
 8001736:	10a4      	asrs	r4, r4, #2
 8001738:	42a6      	cmp	r6, r4
 800173a:	d109      	bne.n	8001750 <__libc_init_array+0x24>
 800173c:	2600      	movs	r6, #0
 800173e:	f000 f821 	bl	8001784 <_init>
 8001742:	4d0a      	ldr	r5, [pc, #40]	; (800176c <__libc_init_array+0x40>)
 8001744:	4c0a      	ldr	r4, [pc, #40]	; (8001770 <__libc_init_array+0x44>)
 8001746:	1b64      	subs	r4, r4, r5
 8001748:	10a4      	asrs	r4, r4, #2
 800174a:	42a6      	cmp	r6, r4
 800174c:	d105      	bne.n	800175a <__libc_init_array+0x2e>
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	00b3      	lsls	r3, r6, #2
 8001752:	58eb      	ldr	r3, [r5, r3]
 8001754:	4798      	blx	r3
 8001756:	3601      	adds	r6, #1
 8001758:	e7ee      	b.n	8001738 <__libc_init_array+0xc>
 800175a:	00b3      	lsls	r3, r6, #2
 800175c:	58eb      	ldr	r3, [r5, r3]
 800175e:	4798      	blx	r3
 8001760:	3601      	adds	r6, #1
 8001762:	e7f2      	b.n	800174a <__libc_init_array+0x1e>
 8001764:	080017cc 	.word	0x080017cc
 8001768:	080017cc 	.word	0x080017cc
 800176c:	080017cc 	.word	0x080017cc
 8001770:	080017d0 	.word	0x080017d0

08001774 <memset>:
 8001774:	0003      	movs	r3, r0
 8001776:	1882      	adds	r2, r0, r2
 8001778:	4293      	cmp	r3, r2
 800177a:	d100      	bne.n	800177e <memset+0xa>
 800177c:	4770      	bx	lr
 800177e:	7019      	strb	r1, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	e7f9      	b.n	8001778 <memset+0x4>

08001784 <_init>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178a:	bc08      	pop	{r3}
 800178c:	469e      	mov	lr, r3
 800178e:	4770      	bx	lr

08001790 <_fini>:
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001796:	bc08      	pop	{r3}
 8001798:	469e      	mov	lr, r3
 800179a:	4770      	bx	lr
